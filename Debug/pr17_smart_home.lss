
pr17_smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00002c72  00002d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000b8  008000b8  00002d5e  2**0
                  ALLOC
  3 .stab         00002910  00000000  00000000  00002d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dfb  00000000  00000000  00005670  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000646b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000671b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008364  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000924f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__vector_1>
       8:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__vector_2>
       c:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 13 	call	0x272c	; 0x272c <main>
      8a:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 eb       	ldi	r26, 0xB0	; 176
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 eb       	ldi	r24, 0xB0	; 176
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_SendCommand>:
#include "../DIO/DIO_INTER.h"

#include<util/delay.h>

void LCD_SendCommand(u8 cmd)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e9 97       	sbiw	r28, 0x39	; 57
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(CONTROL_PORT,DIO_PIN0,DIO_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
	DIO_SetPinValue(CONTROL_PORT,DIO_PIN1,DIO_LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e8       	ldi	r26, 0x80	; 128
     b76:	bf e3       	ldi	r27, 0x3F	; 63
     b78:	8d ab       	std	Y+53, r24	; 0x35
     b7a:	9e ab       	std	Y+54, r25	; 0x36
     b7c:	af ab       	std	Y+55, r26	; 0x37
     b7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b80:	6d a9       	ldd	r22, Y+53	; 0x35
     b82:	7e a9       	ldd	r23, Y+54	; 0x36
     b84:	8f a9       	ldd	r24, Y+55	; 0x37
     b86:	98 ad       	ldd	r25, Y+56	; 0x38
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	4a ef       	ldi	r20, 0xFA	; 250
     b8e:	54 e4       	ldi	r21, 0x44	; 68
     b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	89 ab       	std	Y+49, r24	; 0x31
     b9a:	9a ab       	std	Y+50, r25	; 0x32
     b9c:	ab ab       	std	Y+51, r26	; 0x33
     b9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ba0:	69 a9       	ldd	r22, Y+49	; 0x31
     ba2:	7a a9       	ldd	r23, Y+50	; 0x32
     ba4:	8b a9       	ldd	r24, Y+51	; 0x33
     ba6:	9c a9       	ldd	r25, Y+52	; 0x34
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e8       	ldi	r20, 0x80	; 128
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	2c f4       	brge	.+10     	; 0xbc2 <LCD_SendCommand+0x7c>
		__ticks = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	98 ab       	std	Y+48, r25	; 0x30
     bbe:	8f a7       	std	Y+47, r24	; 0x2f
     bc0:	3f c0       	rjmp	.+126    	; 0xc40 <LCD_SendCommand+0xfa>
	else if (__tmp > 65535)
     bc2:	69 a9       	ldd	r22, Y+49	; 0x31
     bc4:	7a a9       	ldd	r23, Y+50	; 0x32
     bc6:	8b a9       	ldd	r24, Y+51	; 0x33
     bc8:	9c a9       	ldd	r25, Y+52	; 0x34
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	57 e4       	ldi	r21, 0x47	; 71
     bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	4c f5       	brge	.+82     	; 0xc2c <LCD_SendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bda:	6d a9       	ldd	r22, Y+53	; 0x35
     bdc:	7e a9       	ldd	r23, Y+54	; 0x36
     bde:	8f a9       	ldd	r24, Y+55	; 0x37
     be0:	98 ad       	ldd	r25, Y+56	; 0x38
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	98 ab       	std	Y+48, r25	; 0x30
     c00:	8f a7       	std	Y+47, r24	; 0x2f
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <LCD_SendCommand+0xdc>
     c04:	88 ec       	ldi	r24, 0xC8	; 200
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9e a7       	std	Y+46, r25	; 0x2e
     c0a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c0e:	9e a5       	ldd	r25, Y+46	; 0x2e
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <LCD_SendCommand+0xca>
     c14:	9e a7       	std	Y+46, r25	; 0x2e
     c16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1a:	98 a9       	ldd	r25, Y+48	; 0x30
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	98 ab       	std	Y+48, r25	; 0x30
     c20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c22:	8f a5       	ldd	r24, Y+47	; 0x2f
     c24:	98 a9       	ldd	r25, Y+48	; 0x30
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	69 f7       	brne	.-38     	; 0xc04 <LCD_SendCommand+0xbe>
     c2a:	14 c0       	rjmp	.+40     	; 0xc54 <LCD_SendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2c:	69 a9       	ldd	r22, Y+49	; 0x31
     c2e:	7a a9       	ldd	r23, Y+50	; 0x32
     c30:	8b a9       	ldd	r24, Y+51	; 0x33
     c32:	9c a9       	ldd	r25, Y+52	; 0x34
     c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	98 ab       	std	Y+48, r25	; 0x30
     c3e:	8f a7       	std	Y+47, r24	; 0x2f
     c40:	8f a5       	ldd	r24, Y+47	; 0x2f
     c42:	98 a9       	ldd	r25, Y+48	; 0x30
     c44:	9c a7       	std	Y+44, r25	; 0x2c
     c46:	8b a7       	std	Y+43, r24	; 0x2b
     c48:	8b a5       	ldd	r24, Y+43	; 0x2b
     c4a:	9c a5       	ldd	r25, Y+44	; 0x2c
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <LCD_SendCommand+0x106>
     c50:	9c a7       	std	Y+44, r25	; 0x2c
     c52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_SetPortValue(DATA_PORT,cmd);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	69 ad       	ldd	r22, Y+57	; 0x39
     c58:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e8       	ldi	r26, 0x80	; 128
     c62:	bf e3       	ldi	r27, 0x3F	; 63
     c64:	8f a3       	std	Y+39, r24	; 0x27
     c66:	98 a7       	std	Y+40, r25	; 0x28
     c68:	a9 a7       	std	Y+41, r26	; 0x29
     c6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6c:	6f a1       	ldd	r22, Y+39	; 0x27
     c6e:	78 a5       	ldd	r23, Y+40	; 0x28
     c70:	89 a5       	ldd	r24, Y+41	; 0x29
     c72:	9a a5       	ldd	r25, Y+42	; 0x2a
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	4a ef       	ldi	r20, 0xFA	; 250
     c7a:	54 e4       	ldi	r21, 0x44	; 68
     c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	8b a3       	std	Y+35, r24	; 0x23
     c86:	9c a3       	std	Y+36, r25	; 0x24
     c88:	ad a3       	std	Y+37, r26	; 0x25
     c8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c8c:	6b a1       	ldd	r22, Y+35	; 0x23
     c8e:	7c a1       	ldd	r23, Y+36	; 0x24
     c90:	8d a1       	ldd	r24, Y+37	; 0x25
     c92:	9e a1       	ldd	r25, Y+38	; 0x26
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e8       	ldi	r20, 0x80	; 128
     c9a:	5f e3       	ldi	r21, 0x3F	; 63
     c9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ca0:	88 23       	and	r24, r24
     ca2:	2c f4       	brge	.+10     	; 0xcae <LCD_SendCommand+0x168>
		__ticks = 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9a a3       	std	Y+34, r25	; 0x22
     caa:	89 a3       	std	Y+33, r24	; 0x21
     cac:	3f c0       	rjmp	.+126    	; 0xd2c <LCD_SendCommand+0x1e6>
	else if (__tmp > 65535)
     cae:	6b a1       	ldd	r22, Y+35	; 0x23
     cb0:	7c a1       	ldd	r23, Y+36	; 0x24
     cb2:	8d a1       	ldd	r24, Y+37	; 0x25
     cb4:	9e a1       	ldd	r25, Y+38	; 0x26
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	3f ef       	ldi	r19, 0xFF	; 255
     cba:	4f e7       	ldi	r20, 0x7F	; 127
     cbc:	57 e4       	ldi	r21, 0x47	; 71
     cbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc2:	18 16       	cp	r1, r24
     cc4:	4c f5       	brge	.+82     	; 0xd18 <LCD_SendCommand+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc6:	6f a1       	ldd	r22, Y+39	; 0x27
     cc8:	78 a5       	ldd	r23, Y+40	; 0x28
     cca:	89 a5       	ldd	r24, Y+41	; 0x29
     ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e2       	ldi	r20, 0x20	; 32
     cd4:	51 e4       	ldi	r21, 0x41	; 65
     cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	9a a3       	std	Y+34, r25	; 0x22
     cec:	89 a3       	std	Y+33, r24	; 0x21
     cee:	0f c0       	rjmp	.+30     	; 0xd0e <LCD_SendCommand+0x1c8>
     cf0:	88 ec       	ldi	r24, 0xC8	; 200
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	98 a3       	std	Y+32, r25	; 0x20
     cf6:	8f 8f       	std	Y+31, r24	; 0x1f
     cf8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cfa:	98 a1       	ldd	r25, Y+32	; 0x20
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <LCD_SendCommand+0x1b6>
     d00:	98 a3       	std	Y+32, r25	; 0x20
     d02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d04:	89 a1       	ldd	r24, Y+33	; 0x21
     d06:	9a a1       	ldd	r25, Y+34	; 0x22
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	9a a3       	std	Y+34, r25	; 0x22
     d0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0e:	89 a1       	ldd	r24, Y+33	; 0x21
     d10:	9a a1       	ldd	r25, Y+34	; 0x22
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	69 f7       	brne	.-38     	; 0xcf0 <LCD_SendCommand+0x1aa>
     d16:	14 c0       	rjmp	.+40     	; 0xd40 <LCD_SendCommand+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d18:	6b a1       	ldd	r22, Y+35	; 0x23
     d1a:	7c a1       	ldd	r23, Y+36	; 0x24
     d1c:	8d a1       	ldd	r24, Y+37	; 0x25
     d1e:	9e a1       	ldd	r25, Y+38	; 0x26
     d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	9a a3       	std	Y+34, r25	; 0x22
     d2a:	89 a3       	std	Y+33, r24	; 0x21
     d2c:	89 a1       	ldd	r24, Y+33	; 0x21
     d2e:	9a a1       	ldd	r25, Y+34	; 0x22
     d30:	9e 8f       	std	Y+30, r25	; 0x1e
     d32:	8d 8f       	std	Y+29, r24	; 0x1d
     d34:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d36:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <LCD_SendCommand+0x1f2>
     d3c:	9e 8f       	std	Y+30, r25	; 0x1e
     d3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_SetPinValue(CONTROL_PORT,DIO_PIN2,DIO_HIGH);
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	62 e0       	ldi	r22, 0x02	; 2
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e8       	ldi	r26, 0x80	; 128
     d50:	bf e3       	ldi	r27, 0x3F	; 63
     d52:	89 8f       	std	Y+25, r24	; 0x19
     d54:	9a 8f       	std	Y+26, r25	; 0x1a
     d56:	ab 8f       	std	Y+27, r26	; 0x1b
     d58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5a:	69 8d       	ldd	r22, Y+25	; 0x19
     d5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	4a ef       	ldi	r20, 0xFA	; 250
     d68:	54 e4       	ldi	r21, 0x44	; 68
     d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	8d 8b       	std	Y+21, r24	; 0x15
     d74:	9e 8b       	std	Y+22, r25	; 0x16
     d76:	af 8b       	std	Y+23, r26	; 0x17
     d78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d7a:	6d 89       	ldd	r22, Y+21	; 0x15
     d7c:	7e 89       	ldd	r23, Y+22	; 0x16
     d7e:	8f 89       	ldd	r24, Y+23	; 0x17
     d80:	98 8d       	ldd	r25, Y+24	; 0x18
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e8       	ldi	r20, 0x80	; 128
     d88:	5f e3       	ldi	r21, 0x3F	; 63
     d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d8e:	88 23       	and	r24, r24
     d90:	2c f4       	brge	.+10     	; 0xd9c <LCD_SendCommand+0x256>
		__ticks = 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9c 8b       	std	Y+20, r25	; 0x14
     d98:	8b 8b       	std	Y+19, r24	; 0x13
     d9a:	3f c0       	rjmp	.+126    	; 0xe1a <LCD_SendCommand+0x2d4>
	else if (__tmp > 65535)
     d9c:	6d 89       	ldd	r22, Y+21	; 0x15
     d9e:	7e 89       	ldd	r23, Y+22	; 0x16
     da0:	8f 89       	ldd	r24, Y+23	; 0x17
     da2:	98 8d       	ldd	r25, Y+24	; 0x18
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	3f ef       	ldi	r19, 0xFF	; 255
     da8:	4f e7       	ldi	r20, 0x7F	; 127
     daa:	57 e4       	ldi	r21, 0x47	; 71
     dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db0:	18 16       	cp	r1, r24
     db2:	4c f5       	brge	.+82     	; 0xe06 <LCD_SendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db4:	69 8d       	ldd	r22, Y+25	; 0x19
     db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9c 8b       	std	Y+20, r25	; 0x14
     dda:	8b 8b       	std	Y+19, r24	; 0x13
     ddc:	0f c0       	rjmp	.+30     	; 0xdfc <LCD_SendCommand+0x2b6>
     dde:	88 ec       	ldi	r24, 0xC8	; 200
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9a 8b       	std	Y+18, r25	; 0x12
     de4:	89 8b       	std	Y+17, r24	; 0x11
     de6:	89 89       	ldd	r24, Y+17	; 0x11
     de8:	9a 89       	ldd	r25, Y+18	; 0x12
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <LCD_SendCommand+0x2a4>
     dee:	9a 8b       	std	Y+18, r25	; 0x12
     df0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df2:	8b 89       	ldd	r24, Y+19	; 0x13
     df4:	9c 89       	ldd	r25, Y+20	; 0x14
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	9c 8b       	std	Y+20, r25	; 0x14
     dfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfc:	8b 89       	ldd	r24, Y+19	; 0x13
     dfe:	9c 89       	ldd	r25, Y+20	; 0x14
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	69 f7       	brne	.-38     	; 0xdde <LCD_SendCommand+0x298>
     e04:	14 c0       	rjmp	.+40     	; 0xe2e <LCD_SendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e06:	6d 89       	ldd	r22, Y+21	; 0x15
     e08:	7e 89       	ldd	r23, Y+22	; 0x16
     e0a:	8f 89       	ldd	r24, Y+23	; 0x17
     e0c:	98 8d       	ldd	r25, Y+24	; 0x18
     e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	9c 8b       	std	Y+20, r25	; 0x14
     e18:	8b 8b       	std	Y+19, r24	; 0x13
     e1a:	8b 89       	ldd	r24, Y+19	; 0x13
     e1c:	9c 89       	ldd	r25, Y+20	; 0x14
     e1e:	98 8b       	std	Y+16, r25	; 0x10
     e20:	8f 87       	std	Y+15, r24	; 0x0f
     e22:	8f 85       	ldd	r24, Y+15	; 0x0f
     e24:	98 89       	ldd	r25, Y+16	; 0x10
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <LCD_SendCommand+0x2e0>
     e2a:	98 8b       	std	Y+16, r25	; 0x10
     e2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(CONTROL_PORT,DIO_PIN2,DIO_LOW);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	62 e0       	ldi	r22, 0x02	; 2
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a0 e8       	ldi	r26, 0x80	; 128
     e3e:	bf e3       	ldi	r27, 0x3F	; 63
     e40:	8b 87       	std	Y+11, r24	; 0x0b
     e42:	9c 87       	std	Y+12, r25	; 0x0c
     e44:	ad 87       	std	Y+13, r26	; 0x0d
     e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e48:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	4a ef       	ldi	r20, 0xFA	; 250
     e56:	54 e4       	ldi	r21, 0x44	; 68
     e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	8f 83       	std	Y+7, r24	; 0x07
     e62:	98 87       	std	Y+8, r25	; 0x08
     e64:	a9 87       	std	Y+9, r26	; 0x09
     e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e68:	6f 81       	ldd	r22, Y+7	; 0x07
     e6a:	78 85       	ldd	r23, Y+8	; 0x08
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	2c f4       	brge	.+10     	; 0xe8a <LCD_SendCommand+0x344>
		__ticks = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <LCD_SendCommand+0x3c2>
	else if (__tmp > 65535)
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	4c f5       	brge	.+82     	; 0xef4 <LCD_SendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	0f c0       	rjmp	.+30     	; 0xeea <LCD_SendCommand+0x3a4>
     ecc:	88 ec       	ldi	r24, 0xC8	; 200
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9c 83       	std	Y+4, r25	; 0x04
     ed2:	8b 83       	std	Y+3, r24	; 0x03
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <LCD_SendCommand+0x392>
     edc:	9c 83       	std	Y+4, r25	; 0x04
     ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	69 f7       	brne	.-38     	; 0xecc <LCD_SendCommand+0x386>
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <LCD_SendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef4:	6f 81       	ldd	r22, Y+7	; 0x07
     ef6:	78 85       	ldd	r23, Y+8	; 0x08
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <LCD_SendCommand+0x3ce>
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
     f1c:	e9 96       	adiw	r28, 0x39	; 57
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <LCD_Init>:


void LCD_Init(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	e8 97       	sbiw	r28, 0x38	; 56
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(CONTROL_PORT,DIO_PIN0,DIO_OUTPUT);
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,DIO_PIN1,DIO_OUTPUT);
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	41 e0       	ldi	r20, 0x01	; 1
     f52:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,DIO_PIN2,DIO_OUTPUT);
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	62 e0       	ldi	r22, 0x02	; 2
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_SetPinDirection>
	DIO_SetPortDirection(DATA_PORT,0xff);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	6f ef       	ldi	r22, 0xFF	; 255
     f64:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <DIO_SetPortDirection>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a8 e4       	ldi	r26, 0x48	; 72
     f6e:	b2 e4       	ldi	r27, 0x42	; 66
     f70:	8d ab       	std	Y+53, r24	; 0x35
     f72:	9e ab       	std	Y+54, r25	; 0x36
     f74:	af ab       	std	Y+55, r26	; 0x37
     f76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f78:	6d a9       	ldd	r22, Y+53	; 0x35
     f7a:	7e a9       	ldd	r23, Y+54	; 0x36
     f7c:	8f a9       	ldd	r24, Y+55	; 0x37
     f7e:	98 ad       	ldd	r25, Y+56	; 0x38
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a ef       	ldi	r20, 0xFA	; 250
     f86:	54 e4       	ldi	r21, 0x44	; 68
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	89 ab       	std	Y+49, r24	; 0x31
     f92:	9a ab       	std	Y+50, r25	; 0x32
     f94:	ab ab       	std	Y+51, r26	; 0x33
     f96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f98:	69 a9       	ldd	r22, Y+49	; 0x31
     f9a:	7a a9       	ldd	r23, Y+50	; 0x32
     f9c:	8b a9       	ldd	r24, Y+51	; 0x33
     f9e:	9c a9       	ldd	r25, Y+52	; 0x34
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fac:	88 23       	and	r24, r24
     fae:	2c f4       	brge	.+10     	; 0xfba <LCD_Init+0x8c>
		__ticks = 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	98 ab       	std	Y+48, r25	; 0x30
     fb6:	8f a7       	std	Y+47, r24	; 0x2f
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <LCD_Init+0x10a>
	else if (__tmp > 65535)
     fba:	69 a9       	ldd	r22, Y+49	; 0x31
     fbc:	7a a9       	ldd	r23, Y+50	; 0x32
     fbe:	8b a9       	ldd	r24, Y+51	; 0x33
     fc0:	9c a9       	ldd	r25, Y+52	; 0x34
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f e7       	ldi	r20, 0x7F	; 127
     fc8:	57 e4       	ldi	r21, 0x47	; 71
     fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fce:	18 16       	cp	r1, r24
     fd0:	4c f5       	brge	.+82     	; 0x1024 <LCD_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd2:	6d a9       	ldd	r22, Y+53	; 0x35
     fd4:	7e a9       	ldd	r23, Y+54	; 0x36
     fd6:	8f a9       	ldd	r24, Y+55	; 0x37
     fd8:	98 ad       	ldd	r25, Y+56	; 0x38
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	98 ab       	std	Y+48, r25	; 0x30
     ff8:	8f a7       	std	Y+47, r24	; 0x2f
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <LCD_Init+0xec>
     ffc:	88 ec       	ldi	r24, 0xC8	; 200
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9e a7       	std	Y+46, r25	; 0x2e
    1002:	8d a7       	std	Y+45, r24	; 0x2d
    1004:	8d a5       	ldd	r24, Y+45	; 0x2d
    1006:	9e a5       	ldd	r25, Y+46	; 0x2e
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <LCD_Init+0xda>
    100c:	9e a7       	std	Y+46, r25	; 0x2e
    100e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	8f a5       	ldd	r24, Y+47	; 0x2f
    1012:	98 a9       	ldd	r25, Y+48	; 0x30
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	98 ab       	std	Y+48, r25	; 0x30
    1018:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	8f a5       	ldd	r24, Y+47	; 0x2f
    101c:	98 a9       	ldd	r25, Y+48	; 0x30
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	69 f7       	brne	.-38     	; 0xffc <LCD_Init+0xce>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <LCD_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	69 a9       	ldd	r22, Y+49	; 0x31
    1026:	7a a9       	ldd	r23, Y+50	; 0x32
    1028:	8b a9       	ldd	r24, Y+51	; 0x33
    102a:	9c a9       	ldd	r25, Y+52	; 0x34
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	98 ab       	std	Y+48, r25	; 0x30
    1036:	8f a7       	std	Y+47, r24	; 0x2f
    1038:	8f a5       	ldd	r24, Y+47	; 0x2f
    103a:	98 a9       	ldd	r25, Y+48	; 0x30
    103c:	9c a7       	std	Y+44, r25	; 0x2c
    103e:	8b a7       	std	Y+43, r24	; 0x2b
    1040:	8b a5       	ldd	r24, Y+43	; 0x2b
    1042:	9c a5       	ldd	r25, Y+44	; 0x2c
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <LCD_Init+0x116>
    1048:	9c a7       	std	Y+44, r25	; 0x2c
    104a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_SendCommand(0b00111000);
    104c:	88 e3       	ldi	r24, 0x38	; 56
    104e:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a0 e8       	ldi	r26, 0x80	; 128
    1058:	bf e3       	ldi	r27, 0x3F	; 63
    105a:	8f a3       	std	Y+39, r24	; 0x27
    105c:	98 a7       	std	Y+40, r25	; 0x28
    105e:	a9 a7       	std	Y+41, r26	; 0x29
    1060:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1062:	6f a1       	ldd	r22, Y+39	; 0x27
    1064:	78 a5       	ldd	r23, Y+40	; 0x28
    1066:	89 a5       	ldd	r24, Y+41	; 0x29
    1068:	9a a5       	ldd	r25, Y+42	; 0x2a
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4a ef       	ldi	r20, 0xFA	; 250
    1070:	54 e4       	ldi	r21, 0x44	; 68
    1072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	8b a3       	std	Y+35, r24	; 0x23
    107c:	9c a3       	std	Y+36, r25	; 0x24
    107e:	ad a3       	std	Y+37, r26	; 0x25
    1080:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1082:	6b a1       	ldd	r22, Y+35	; 0x23
    1084:	7c a1       	ldd	r23, Y+36	; 0x24
    1086:	8d a1       	ldd	r24, Y+37	; 0x25
    1088:	9e a1       	ldd	r25, Y+38	; 0x26
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e8       	ldi	r20, 0x80	; 128
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1096:	88 23       	and	r24, r24
    1098:	2c f4       	brge	.+10     	; 0x10a4 <LCD_Init+0x176>
		__ticks = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9a a3       	std	Y+34, r25	; 0x22
    10a0:	89 a3       	std	Y+33, r24	; 0x21
    10a2:	3f c0       	rjmp	.+126    	; 0x1122 <LCD_Init+0x1f4>
	else if (__tmp > 65535)
    10a4:	6b a1       	ldd	r22, Y+35	; 0x23
    10a6:	7c a1       	ldd	r23, Y+36	; 0x24
    10a8:	8d a1       	ldd	r24, Y+37	; 0x25
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	3f ef       	ldi	r19, 0xFF	; 255
    10b0:	4f e7       	ldi	r20, 0x7F	; 127
    10b2:	57 e4       	ldi	r21, 0x47	; 71
    10b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	4c f5       	brge	.+82     	; 0x110e <LCD_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10bc:	6f a1       	ldd	r22, Y+39	; 0x27
    10be:	78 a5       	ldd	r23, Y+40	; 0x28
    10c0:	89 a5       	ldd	r24, Y+41	; 0x29
    10c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e2       	ldi	r20, 0x20	; 32
    10ca:	51 e4       	ldi	r21, 0x41	; 65
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	9a a3       	std	Y+34, r25	; 0x22
    10e2:	89 a3       	std	Y+33, r24	; 0x21
    10e4:	0f c0       	rjmp	.+30     	; 0x1104 <LCD_Init+0x1d6>
    10e6:	88 ec       	ldi	r24, 0xC8	; 200
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	98 a3       	std	Y+32, r25	; 0x20
    10ec:	8f 8f       	std	Y+31, r24	; 0x1f
    10ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10f0:	98 a1       	ldd	r25, Y+32	; 0x20
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <LCD_Init+0x1c4>
    10f6:	98 a3       	std	Y+32, r25	; 0x20
    10f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fa:	89 a1       	ldd	r24, Y+33	; 0x21
    10fc:	9a a1       	ldd	r25, Y+34	; 0x22
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	9a a3       	std	Y+34, r25	; 0x22
    1102:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1104:	89 a1       	ldd	r24, Y+33	; 0x21
    1106:	9a a1       	ldd	r25, Y+34	; 0x22
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	69 f7       	brne	.-38     	; 0x10e6 <LCD_Init+0x1b8>
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <LCD_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110e:	6b a1       	ldd	r22, Y+35	; 0x23
    1110:	7c a1       	ldd	r23, Y+36	; 0x24
    1112:	8d a1       	ldd	r24, Y+37	; 0x25
    1114:	9e a1       	ldd	r25, Y+38	; 0x26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9a a3       	std	Y+34, r25	; 0x22
    1120:	89 a3       	std	Y+33, r24	; 0x21
    1122:	89 a1       	ldd	r24, Y+33	; 0x21
    1124:	9a a1       	ldd	r25, Y+34	; 0x22
    1126:	9e 8f       	std	Y+30, r25	; 0x1e
    1128:	8d 8f       	std	Y+29, r24	; 0x1d
    112a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    112c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <LCD_Init+0x200>
    1132:	9e 8f       	std	Y+30, r25	; 0x1e
    1134:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_SendCommand(0b00001100);
    1136:	8c e0       	ldi	r24, 0x0C	; 12
    1138:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e8       	ldi	r26, 0x80	; 128
    1142:	bf e3       	ldi	r27, 0x3F	; 63
    1144:	89 8f       	std	Y+25, r24	; 0x19
    1146:	9a 8f       	std	Y+26, r25	; 0x1a
    1148:	ab 8f       	std	Y+27, r26	; 0x1b
    114a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114c:	69 8d       	ldd	r22, Y+25	; 0x19
    114e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a ef       	ldi	r20, 0xFA	; 250
    115a:	54 e4       	ldi	r21, 0x44	; 68
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8d 8b       	std	Y+21, r24	; 0x15
    1166:	9e 8b       	std	Y+22, r25	; 0x16
    1168:	af 8b       	std	Y+23, r26	; 0x17
    116a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    116c:	6d 89       	ldd	r22, Y+21	; 0x15
    116e:	7e 89       	ldd	r23, Y+22	; 0x16
    1170:	8f 89       	ldd	r24, Y+23	; 0x17
    1172:	98 8d       	ldd	r25, Y+24	; 0x18
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	2c f4       	brge	.+10     	; 0x118e <LCD_Init+0x260>
		__ticks = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9c 8b       	std	Y+20, r25	; 0x14
    118a:	8b 8b       	std	Y+19, r24	; 0x13
    118c:	3f c0       	rjmp	.+126    	; 0x120c <LCD_Init+0x2de>
	else if (__tmp > 65535)
    118e:	6d 89       	ldd	r22, Y+21	; 0x15
    1190:	7e 89       	ldd	r23, Y+22	; 0x16
    1192:	8f 89       	ldd	r24, Y+23	; 0x17
    1194:	98 8d       	ldd	r25, Y+24	; 0x18
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	4c f5       	brge	.+82     	; 0x11f8 <LCD_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	69 8d       	ldd	r22, Y+25	; 0x19
    11a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <LCD_Init+0x2c0>
    11d0:	88 ec       	ldi	r24, 0xC8	; 200
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9a 8b       	std	Y+18, r25	; 0x12
    11d6:	89 8b       	std	Y+17, r24	; 0x11
    11d8:	89 89       	ldd	r24, Y+17	; 0x11
    11da:	9a 89       	ldd	r25, Y+18	; 0x12
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <LCD_Init+0x2ae>
    11e0:	9a 8b       	std	Y+18, r25	; 0x12
    11e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	8b 89       	ldd	r24, Y+19	; 0x13
    11e6:	9c 89       	ldd	r25, Y+20	; 0x14
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9c 8b       	std	Y+20, r25	; 0x14
    11ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ee:	8b 89       	ldd	r24, Y+19	; 0x13
    11f0:	9c 89       	ldd	r25, Y+20	; 0x14
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <LCD_Init+0x2a2>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <LCD_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	6d 89       	ldd	r22, Y+21	; 0x15
    11fa:	7e 89       	ldd	r23, Y+22	; 0x16
    11fc:	8f 89       	ldd	r24, Y+23	; 0x17
    11fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9c 8b       	std	Y+20, r25	; 0x14
    120a:	8b 8b       	std	Y+19, r24	; 0x13
    120c:	8b 89       	ldd	r24, Y+19	; 0x13
    120e:	9c 89       	ldd	r25, Y+20	; 0x14
    1210:	98 8b       	std	Y+16, r25	; 0x10
    1212:	8f 87       	std	Y+15, r24	; 0x0f
    1214:	8f 85       	ldd	r24, Y+15	; 0x0f
    1216:	98 89       	ldd	r25, Y+16	; 0x10
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <LCD_Init+0x2ea>
    121c:	98 8b       	std	Y+16, r25	; 0x10
    121e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_SendCommand(0b00000001);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 e4       	ldi	r26, 0x40	; 64
    122c:	b0 e4       	ldi	r27, 0x40	; 64
    122e:	8b 87       	std	Y+11, r24	; 0x0b
    1230:	9c 87       	std	Y+12, r25	; 0x0c
    1232:	ad 87       	std	Y+13, r26	; 0x0d
    1234:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1236:	6b 85       	ldd	r22, Y+11	; 0x0b
    1238:	7c 85       	ldd	r23, Y+12	; 0x0c
    123a:	8d 85       	ldd	r24, Y+13	; 0x0d
    123c:	9e 85       	ldd	r25, Y+14	; 0x0e
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	4a ef       	ldi	r20, 0xFA	; 250
    1244:	54 e4       	ldi	r21, 0x44	; 68
    1246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	8f 83       	std	Y+7, r24	; 0x07
    1250:	98 87       	std	Y+8, r25	; 0x08
    1252:	a9 87       	std	Y+9, r26	; 0x09
    1254:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1256:	6f 81       	ldd	r22, Y+7	; 0x07
    1258:	78 85       	ldd	r23, Y+8	; 0x08
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	9a 85       	ldd	r25, Y+10	; 0x0a
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e8       	ldi	r20, 0x80	; 128
    1264:	5f e3       	ldi	r21, 0x3F	; 63
    1266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126a:	88 23       	and	r24, r24
    126c:	2c f4       	brge	.+10     	; 0x1278 <LCD_Init+0x34a>
		__ticks = 1;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	3f c0       	rjmp	.+126    	; 0x12f6 <LCD_Init+0x3c8>
	else if (__tmp > 65535)
    1278:	6f 81       	ldd	r22, Y+7	; 0x07
    127a:	78 85       	ldd	r23, Y+8	; 0x08
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	3f ef       	ldi	r19, 0xFF	; 255
    1284:	4f e7       	ldi	r20, 0x7F	; 127
    1286:	57 e4       	ldi	r21, 0x47	; 71
    1288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    128c:	18 16       	cp	r1, r24
    128e:	4c f5       	brge	.+82     	; 0x12e2 <LCD_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1290:	6b 85       	ldd	r22, Y+11	; 0x0b
    1292:	7c 85       	ldd	r23, Y+12	; 0x0c
    1294:	8d 85       	ldd	r24, Y+13	; 0x0d
    1296:	9e 85       	ldd	r25, Y+14	; 0x0e
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e2       	ldi	r20, 0x20	; 32
    129e:	51 e4       	ldi	r21, 0x41	; 65
    12a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	bc 01       	movw	r22, r24
    12aa:	cd 01       	movw	r24, r26
    12ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	9e 83       	std	Y+6, r25	; 0x06
    12b6:	8d 83       	std	Y+5, r24	; 0x05
    12b8:	0f c0       	rjmp	.+30     	; 0x12d8 <LCD_Init+0x3aa>
    12ba:	88 ec       	ldi	r24, 0xC8	; 200
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9c 83       	std	Y+4, r25	; 0x04
    12c0:	8b 83       	std	Y+3, r24	; 0x03
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <LCD_Init+0x398>
    12ca:	9c 83       	std	Y+4, r25	; 0x04
    12cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	9e 83       	std	Y+6, r25	; 0x06
    12d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	69 f7       	brne	.-38     	; 0x12ba <LCD_Init+0x38c>
    12e0:	14 c0       	rjmp	.+40     	; 0x130a <LCD_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e2:	6f 81       	ldd	r22, Y+7	; 0x07
    12e4:	78 85       	ldd	r23, Y+8	; 0x08
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	8d 83       	std	Y+5, r24	; 0x05
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <LCD_Init+0x3d4>
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	LCD_SendCommand(0b00000110);
    130a:	86 e0       	ldi	r24, 0x06	; 6
    130c:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
}
    1310:	e8 96       	adiw	r28, 0x38	; 56
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <LCD_SendCharacter>:


void LCD_SendCharacter(u8 ch)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	e9 97       	sbiw	r28, 0x39	; 57
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(CONTROL_PORT,DIO_PIN0,DIO_HIGH);
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
	DIO_SetPinValue(CONTROL_PORT,DIO_PIN1,DIO_LOW);
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a0 e8       	ldi	r26, 0x80	; 128
    1352:	bf e3       	ldi	r27, 0x3F	; 63
    1354:	8d ab       	std	Y+53, r24	; 0x35
    1356:	9e ab       	std	Y+54, r25	; 0x36
    1358:	af ab       	std	Y+55, r26	; 0x37
    135a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135c:	6d a9       	ldd	r22, Y+53	; 0x35
    135e:	7e a9       	ldd	r23, Y+54	; 0x36
    1360:	8f a9       	ldd	r24, Y+55	; 0x37
    1362:	98 ad       	ldd	r25, Y+56	; 0x38
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	4a ef       	ldi	r20, 0xFA	; 250
    136a:	54 e4       	ldi	r21, 0x44	; 68
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	89 ab       	std	Y+49, r24	; 0x31
    1376:	9a ab       	std	Y+50, r25	; 0x32
    1378:	ab ab       	std	Y+51, r26	; 0x33
    137a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    137c:	69 a9       	ldd	r22, Y+49	; 0x31
    137e:	7a a9       	ldd	r23, Y+50	; 0x32
    1380:	8b a9       	ldd	r24, Y+51	; 0x33
    1382:	9c a9       	ldd	r25, Y+52	; 0x34
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	2c f4       	brge	.+10     	; 0x139e <LCD_SendCharacter+0x7c>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	98 ab       	std	Y+48, r25	; 0x30
    139a:	8f a7       	std	Y+47, r24	; 0x2f
    139c:	3f c0       	rjmp	.+126    	; 0x141c <LCD_SendCharacter+0xfa>
	else if (__tmp > 65535)
    139e:	69 a9       	ldd	r22, Y+49	; 0x31
    13a0:	7a a9       	ldd	r23, Y+50	; 0x32
    13a2:	8b a9       	ldd	r24, Y+51	; 0x33
    13a4:	9c a9       	ldd	r25, Y+52	; 0x34
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	3f ef       	ldi	r19, 0xFF	; 255
    13aa:	4f e7       	ldi	r20, 0x7F	; 127
    13ac:	57 e4       	ldi	r21, 0x47	; 71
    13ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	4c f5       	brge	.+82     	; 0x1408 <LCD_SendCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b6:	6d a9       	ldd	r22, Y+53	; 0x35
    13b8:	7e a9       	ldd	r23, Y+54	; 0x36
    13ba:	8f a9       	ldd	r24, Y+55	; 0x37
    13bc:	98 ad       	ldd	r25, Y+56	; 0x38
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e2       	ldi	r20, 0x20	; 32
    13c4:	51 e4       	ldi	r21, 0x41	; 65
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	98 ab       	std	Y+48, r25	; 0x30
    13dc:	8f a7       	std	Y+47, r24	; 0x2f
    13de:	0f c0       	rjmp	.+30     	; 0x13fe <LCD_SendCharacter+0xdc>
    13e0:	88 ec       	ldi	r24, 0xC8	; 200
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9e a7       	std	Y+46, r25	; 0x2e
    13e6:	8d a7       	std	Y+45, r24	; 0x2d
    13e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    13ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <LCD_SendCharacter+0xca>
    13f0:	9e a7       	std	Y+46, r25	; 0x2e
    13f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f6:	98 a9       	ldd	r25, Y+48	; 0x30
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	98 ab       	std	Y+48, r25	; 0x30
    13fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1400:	98 a9       	ldd	r25, Y+48	; 0x30
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	69 f7       	brne	.-38     	; 0x13e0 <LCD_SendCharacter+0xbe>
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <LCD_SendCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1408:	69 a9       	ldd	r22, Y+49	; 0x31
    140a:	7a a9       	ldd	r23, Y+50	; 0x32
    140c:	8b a9       	ldd	r24, Y+51	; 0x33
    140e:	9c a9       	ldd	r25, Y+52	; 0x34
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	98 ab       	std	Y+48, r25	; 0x30
    141a:	8f a7       	std	Y+47, r24	; 0x2f
    141c:	8f a5       	ldd	r24, Y+47	; 0x2f
    141e:	98 a9       	ldd	r25, Y+48	; 0x30
    1420:	9c a7       	std	Y+44, r25	; 0x2c
    1422:	8b a7       	std	Y+43, r24	; 0x2b
    1424:	8b a5       	ldd	r24, Y+43	; 0x2b
    1426:	9c a5       	ldd	r25, Y+44	; 0x2c
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <LCD_SendCharacter+0x106>
    142c:	9c a7       	std	Y+44, r25	; 0x2c
    142e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_SetPortValue(DATA_PORT,ch);
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	69 ad       	ldd	r22, Y+57	; 0x39
    1434:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a0 e8       	ldi	r26, 0x80	; 128
    143e:	bf e3       	ldi	r27, 0x3F	; 63
    1440:	8f a3       	std	Y+39, r24	; 0x27
    1442:	98 a7       	std	Y+40, r25	; 0x28
    1444:	a9 a7       	std	Y+41, r26	; 0x29
    1446:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	6f a1       	ldd	r22, Y+39	; 0x27
    144a:	78 a5       	ldd	r23, Y+40	; 0x28
    144c:	89 a5       	ldd	r24, Y+41	; 0x29
    144e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a ef       	ldi	r20, 0xFA	; 250
    1456:	54 e4       	ldi	r21, 0x44	; 68
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8b a3       	std	Y+35, r24	; 0x23
    1462:	9c a3       	std	Y+36, r25	; 0x24
    1464:	ad a3       	std	Y+37, r26	; 0x25
    1466:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1468:	6b a1       	ldd	r22, Y+35	; 0x23
    146a:	7c a1       	ldd	r23, Y+36	; 0x24
    146c:	8d a1       	ldd	r24, Y+37	; 0x25
    146e:	9e a1       	ldd	r25, Y+38	; 0x26
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <LCD_SendCharacter+0x168>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9a a3       	std	Y+34, r25	; 0x22
    1486:	89 a3       	std	Y+33, r24	; 0x21
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <LCD_SendCharacter+0x1e6>
	else if (__tmp > 65535)
    148a:	6b a1       	ldd	r22, Y+35	; 0x23
    148c:	7c a1       	ldd	r23, Y+36	; 0x24
    148e:	8d a1       	ldd	r24, Y+37	; 0x25
    1490:	9e a1       	ldd	r25, Y+38	; 0x26
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <LCD_SendCharacter+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	6f a1       	ldd	r22, Y+39	; 0x27
    14a4:	78 a5       	ldd	r23, Y+40	; 0x28
    14a6:	89 a5       	ldd	r24, Y+41	; 0x29
    14a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e2       	ldi	r20, 0x20	; 32
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9a a3       	std	Y+34, r25	; 0x22
    14c8:	89 a3       	std	Y+33, r24	; 0x21
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <LCD_SendCharacter+0x1c8>
    14cc:	88 ec       	ldi	r24, 0xC8	; 200
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	98 a3       	std	Y+32, r25	; 0x20
    14d2:	8f 8f       	std	Y+31, r24	; 0x1f
    14d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14d6:	98 a1       	ldd	r25, Y+32	; 0x20
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <LCD_SendCharacter+0x1b6>
    14dc:	98 a3       	std	Y+32, r25	; 0x20
    14de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	89 a1       	ldd	r24, Y+33	; 0x21
    14e2:	9a a1       	ldd	r25, Y+34	; 0x22
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	9a a3       	std	Y+34, r25	; 0x22
    14e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	89 a1       	ldd	r24, Y+33	; 0x21
    14ec:	9a a1       	ldd	r25, Y+34	; 0x22
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f7       	brne	.-38     	; 0x14cc <LCD_SendCharacter+0x1aa>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <LCD_SendCharacter+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	6b a1       	ldd	r22, Y+35	; 0x23
    14f6:	7c a1       	ldd	r23, Y+36	; 0x24
    14f8:	8d a1       	ldd	r24, Y+37	; 0x25
    14fa:	9e a1       	ldd	r25, Y+38	; 0x26
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9a a3       	std	Y+34, r25	; 0x22
    1506:	89 a3       	std	Y+33, r24	; 0x21
    1508:	89 a1       	ldd	r24, Y+33	; 0x21
    150a:	9a a1       	ldd	r25, Y+34	; 0x22
    150c:	9e 8f       	std	Y+30, r25	; 0x1e
    150e:	8d 8f       	std	Y+29, r24	; 0x1d
    1510:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1512:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <LCD_SendCharacter+0x1f2>
    1518:	9e 8f       	std	Y+30, r25	; 0x1e
    151a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_SetPinValue(CONTROL_PORT,DIO_PIN2,DIO_HIGH);
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	62 e0       	ldi	r22, 0x02	; 2
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e8       	ldi	r26, 0x80	; 128
    152c:	bf e3       	ldi	r27, 0x3F	; 63
    152e:	89 8f       	std	Y+25, r24	; 0x19
    1530:	9a 8f       	std	Y+26, r25	; 0x1a
    1532:	ab 8f       	std	Y+27, r26	; 0x1b
    1534:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	69 8d       	ldd	r22, Y+25	; 0x19
    1538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a ef       	ldi	r20, 0xFA	; 250
    1544:	54 e4       	ldi	r21, 0x44	; 68
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	8d 8b       	std	Y+21, r24	; 0x15
    1550:	9e 8b       	std	Y+22, r25	; 0x16
    1552:	af 8b       	std	Y+23, r26	; 0x17
    1554:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1556:	6d 89       	ldd	r22, Y+21	; 0x15
    1558:	7e 89       	ldd	r23, Y+22	; 0x16
    155a:	8f 89       	ldd	r24, Y+23	; 0x17
    155c:	98 8d       	ldd	r25, Y+24	; 0x18
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156a:	88 23       	and	r24, r24
    156c:	2c f4       	brge	.+10     	; 0x1578 <LCD_SendCharacter+0x256>
		__ticks = 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9c 8b       	std	Y+20, r25	; 0x14
    1574:	8b 8b       	std	Y+19, r24	; 0x13
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <LCD_SendCharacter+0x2d4>
	else if (__tmp > 65535)
    1578:	6d 89       	ldd	r22, Y+21	; 0x15
    157a:	7e 89       	ldd	r23, Y+22	; 0x16
    157c:	8f 89       	ldd	r24, Y+23	; 0x17
    157e:	98 8d       	ldd	r25, Y+24	; 0x18
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158c:	18 16       	cp	r1, r24
    158e:	4c f5       	brge	.+82     	; 0x15e2 <LCD_SendCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	69 8d       	ldd	r22, Y+25	; 0x19
    1592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9c 8b       	std	Y+20, r25	; 0x14
    15b6:	8b 8b       	std	Y+19, r24	; 0x13
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <LCD_SendCharacter+0x2b6>
    15ba:	88 ec       	ldi	r24, 0xC8	; 200
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9a 8b       	std	Y+18, r25	; 0x12
    15c0:	89 8b       	std	Y+17, r24	; 0x11
    15c2:	89 89       	ldd	r24, Y+17	; 0x11
    15c4:	9a 89       	ldd	r25, Y+18	; 0x12
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_SendCharacter+0x2a4>
    15ca:	9a 8b       	std	Y+18, r25	; 0x12
    15cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8b 89       	ldd	r24, Y+19	; 0x13
    15d0:	9c 89       	ldd	r25, Y+20	; 0x14
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	9c 8b       	std	Y+20, r25	; 0x14
    15d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8b 89       	ldd	r24, Y+19	; 0x13
    15da:	9c 89       	ldd	r25, Y+20	; 0x14
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <LCD_SendCharacter+0x298>
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <LCD_SendCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	6d 89       	ldd	r22, Y+21	; 0x15
    15e4:	7e 89       	ldd	r23, Y+22	; 0x16
    15e6:	8f 89       	ldd	r24, Y+23	; 0x17
    15e8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9c 8b       	std	Y+20, r25	; 0x14
    15f4:	8b 8b       	std	Y+19, r24	; 0x13
    15f6:	8b 89       	ldd	r24, Y+19	; 0x13
    15f8:	9c 89       	ldd	r25, Y+20	; 0x14
    15fa:	98 8b       	std	Y+16, r25	; 0x10
    15fc:	8f 87       	std	Y+15, r24	; 0x0f
    15fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1600:	98 89       	ldd	r25, Y+16	; 0x10
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_SendCharacter+0x2e0>
    1606:	98 8b       	std	Y+16, r25	; 0x10
    1608:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(CONTROL_PORT,DIO_PIN2,DIO_LOW);
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a0 e8       	ldi	r26, 0x80	; 128
    161a:	bf e3       	ldi	r27, 0x3F	; 63
    161c:	8b 87       	std	Y+11, r24	; 0x0b
    161e:	9c 87       	std	Y+12, r25	; 0x0c
    1620:	ad 87       	std	Y+13, r26	; 0x0d
    1622:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1624:	6b 85       	ldd	r22, Y+11	; 0x0b
    1626:	7c 85       	ldd	r23, Y+12	; 0x0c
    1628:	8d 85       	ldd	r24, Y+13	; 0x0d
    162a:	9e 85       	ldd	r25, Y+14	; 0x0e
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4a ef       	ldi	r20, 0xFA	; 250
    1632:	54 e4       	ldi	r21, 0x44	; 68
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	8f 83       	std	Y+7, r24	; 0x07
    163e:	98 87       	std	Y+8, r25	; 0x08
    1640:	a9 87       	std	Y+9, r26	; 0x09
    1642:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <LCD_SendCharacter+0x344>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <LCD_SendCharacter+0x3c2>
	else if (__tmp > 65535)
    1666:	6f 81       	ldd	r22, Y+7	; 0x07
    1668:	78 85       	ldd	r23, Y+8	; 0x08
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	9a 85       	ldd	r25, Y+10	; 0x0a
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	4c f5       	brge	.+82     	; 0x16d0 <LCD_SendCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1680:	7c 85       	ldd	r23, Y+12	; 0x0c
    1682:	8d 85       	ldd	r24, Y+13	; 0x0d
    1684:	9e 85       	ldd	r25, Y+14	; 0x0e
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <LCD_SendCharacter+0x3a4>
    16a8:	88 ec       	ldi	r24, 0xC8	; 200
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9c 83       	std	Y+4, r25	; 0x04
    16ae:	8b 83       	std	Y+3, r24	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <LCD_SendCharacter+0x392>
    16b8:	9c 83       	std	Y+4, r25	; 0x04
    16ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <LCD_SendCharacter+0x386>
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <LCD_SendCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_SendCharacter+0x3ce>
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    16f8:	e9 96       	adiw	r28, 0x39	; 57
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <LCD_SendString>:
void LCD_SendString(char st[])
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <LCD_SendString+0x6>
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	9b 83       	std	Y+3, r25	; 0x03
    1718:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i =0 ; st[i]!='\0' ; i++)
    171a:	19 82       	std	Y+1, r1	; 0x01
    171c:	0e c0       	rjmp	.+28     	; 0x173a <LCD_SendString+0x30>
	{
		LCD_SendCharacter(st[i]);
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
    1728:	fc 01       	movw	r30, r24
    172a:	e2 0f       	add	r30, r18
    172c:	f3 1f       	adc	r31, r19
    172e:	80 81       	ld	r24, Z
    1730:	0e 94 91 09 	call	0x1322	; 0x1322 <LCD_SendCharacter>
	_delay_ms(1);

}
void LCD_SendString(char st[])
{
	for(u8 i =0 ; st[i]!='\0' ; i++)
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	9b 81       	ldd	r25, Y+3	; 0x03
    1744:	fc 01       	movw	r30, r24
    1746:	e2 0f       	add	r30, r18
    1748:	f3 1f       	adc	r31, r19
    174a:	80 81       	ld	r24, Z
    174c:	88 23       	and	r24, r24
    174e:	39 f7       	brne	.-50     	; 0x171e <LCD_SendString+0x14>
	{
		LCD_SendCharacter(st[i]);
	}
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <LCD_SendNumber>:
void LCD_SendNumber(s32 num)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	2f 97       	sbiw	r28, 0x0f	; 15
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	9f 87       	std	Y+15, r25	; 0x0f
    1772:	8e 87       	std	Y+14, r24	; 0x0e
	u8 count=0;
    1774:	1b 82       	std	Y+3, r1	; 0x03
	u8 arr[10]={0};
    1776:	8a e0       	ldi	r24, 0x0A	; 10
    1778:	fe 01       	movw	r30, r28
    177a:	34 96       	adiw	r30, 0x04	; 4
    177c:	df 01       	movw	r26, r30
    177e:	98 2f       	mov	r25, r24
    1780:	1d 92       	st	X+, r1
    1782:	9a 95       	dec	r25
    1784:	e9 f7       	brne	.-6      	; 0x1780 <LCD_SendNumber+0x24>
	if(num==0)
    1786:	8e 85       	ldd	r24, Y+14	; 0x0e
    1788:	9f 85       	ldd	r25, Y+15	; 0x0f
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	19 f4       	brne	.+6      	; 0x1794 <LCD_SendNumber+0x38>
	{
		LCD_SendCharacter('0');
    178e:	80 e3       	ldi	r24, 0x30	; 48
    1790:	0e 94 91 09 	call	0x1322	; 0x1322 <LCD_SendCharacter>
	}
	if (num <0 )
    1794:	8e 85       	ldd	r24, Y+14	; 0x0e
    1796:	9f 85       	ldd	r25, Y+15	; 0x0f
    1798:	99 23       	and	r25, r25
    179a:	54 f4       	brge	.+20     	; 0x17b0 <LCD_SendNumber+0x54>
	{
		LCD_SendCharacter('-');
    179c:	8d e2       	ldi	r24, 0x2D	; 45
    179e:	0e 94 91 09 	call	0x1322	; 0x1322 <LCD_SendCharacter>
		num = num*(-1);
    17a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a6:	90 95       	com	r25
    17a8:	81 95       	neg	r24
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	9f 87       	std	Y+15, r25	; 0x0f
    17ae:	8e 87       	std	Y+14, r24	; 0x0e
	}

	for (u8 i= 0 ; num!=0 ; i++ )
    17b0:	1a 82       	std	Y+2, r1	; 0x02
    17b2:	20 c0       	rjmp	.+64     	; 0x17f4 <LCD_SendNumber+0x98>
	{ count++;
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	8b 83       	std	Y+3, r24	; 0x03
		arr[i]=num%10;
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	e8 2f       	mov	r30, r24
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    17c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	b9 01       	movw	r22, r18
    17ca:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <__divmodhi4>
    17ce:	28 2f       	mov	r18, r24
    17d0:	ce 01       	movw	r24, r28
    17d2:	04 96       	adiw	r24, 0x04	; 4
    17d4:	e8 0f       	add	r30, r24
    17d6:	f9 1f       	adc	r31, r25
    17d8:	20 83       	st	Z, r18
		num/=10;
    17da:	8e 85       	ldd	r24, Y+14	; 0x0e
    17dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    17de:	2a e0       	ldi	r18, 0x0A	; 10
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	b9 01       	movw	r22, r18
    17e4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <__divmodhi4>
    17e8:	cb 01       	movw	r24, r22
    17ea:	9f 87       	std	Y+15, r25	; 0x0f
    17ec:	8e 87       	std	Y+14, r24	; 0x0e
	{
		LCD_SendCharacter('-');
		num = num*(-1);
	}

	for (u8 i= 0 ; num!=0 ; i++ )
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	8a 83       	std	Y+2, r24	; 0x02
    17f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	e1 f6       	brne	.-72     	; 0x17b4 <LCD_SendNumber+0x58>
	{ count++;
		arr[i]=num%10;
		num/=10;
	}
	for (s8 i = (count-1) ; i>=0 ; i--)
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	11 c0       	rjmp	.+34     	; 0x1826 <LCD_SendNumber+0xca>
	{
		LCD_SendCharacter('0'+arr[i]);
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	33 27       	eor	r19, r19
    180a:	27 fd       	sbrc	r18, 7
    180c:	30 95       	com	r19
    180e:	ce 01       	movw	r24, r28
    1810:	04 96       	adiw	r24, 0x04	; 4
    1812:	fc 01       	movw	r30, r24
    1814:	e2 0f       	add	r30, r18
    1816:	f3 1f       	adc	r31, r19
    1818:	80 81       	ld	r24, Z
    181a:	80 5d       	subi	r24, 0xD0	; 208
    181c:	0e 94 91 09 	call	0x1322	; 0x1322 <LCD_SendCharacter>
	for (u8 i= 0 ; num!=0 ; i++ )
	{ count++;
		arr[i]=num%10;
		num/=10;
	}
	for (s8 i = (count-1) ; i>=0 ; i--)
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	81 50       	subi	r24, 0x01	; 1
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	88 23       	and	r24, r24
    182a:	64 f7       	brge	.-40     	; 0x1804 <LCD_SendNumber+0xa8>
	{
		LCD_SendCharacter('0'+arr[i]);

	}
}
    182c:	2f 96       	adiw	r28, 0x0f	; 15
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <LCD_SaveCustomCharacter>:

void LCD_SaveCustomCharacter(u8 addres , u8 array[])
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <LCD_SaveCustomCharacter+0x6>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <LCD_SaveCustomCharacter+0x8>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	8a 83       	std	Y+2, r24	; 0x02
    184c:	7c 83       	std	Y+4, r23	; 0x04
    184e:	6b 83       	std	Y+3, r22	; 0x03
	LCD_SendCommand(0x40+(8*addres));
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	08 96       	adiw	r24, 0x08	; 8
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
	for(u8 i =0 ; i <8 ; i++)
    1868:	19 82       	std	Y+1, r1	; 0x01
    186a:	0e c0       	rjmp	.+28     	; 0x1888 <LCD_SaveCustomCharacter+0x4a>
	{
		LCD_SendCharacter(array[i]);
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	fc 01       	movw	r30, r24
    1878:	e2 0f       	add	r30, r18
    187a:	f3 1f       	adc	r31, r19
    187c:	80 81       	ld	r24, Z
    187e:	0e 94 91 09 	call	0x1322	; 0x1322 <LCD_SendCharacter>
}

void LCD_SaveCustomCharacter(u8 addres , u8 array[])
{
	LCD_SendCommand(0x40+(8*addres));
	for(u8 i =0 ; i <8 ; i++)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	88 30       	cpi	r24, 0x08	; 8
    188c:	78 f3       	brcs	.-34     	; 0x186c <LCD_SaveCustomCharacter+0x2e>
	{
		LCD_SendCharacter(array[i]);
	}
	LCD_SendCommand(0x80);
    188e:	80 e8       	ldi	r24, 0x80	; 128
    1890:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <LCD_SetCoursorPosition>:
void LCD_SetCoursorPosition(u8 line , u8 position)
{
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <LCD_SetCoursorPosition+0x6>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	6a 83       	std	Y+2, r22	; 0x02
	if (line==0)
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	88 23       	and	r24, r24
    18b4:	29 f4       	brne	.+10     	; 0x18c0 <LCD_SetCoursorPosition+0x1e>
	{
		LCD_SendCommand(0x80+position);
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	80 58       	subi	r24, 0x80	; 128
    18ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <LCD_SetCoursorPosition+0x26>
	}
	else
	{
		LCD_SendCommand(0x80+position+64);
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	80 54       	subi	r24, 0x40	; 64
    18c4:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
	}
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <KeyPadIniit>:
#include "../DIO/DIO_INTER.h"
#include "KEYBAD_INER.h"
#include "KEYPAD_CONFIG.h"
#include<util/delay.h>
void KeyPadIniit(void)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(KEYPAD_PORT , 0x0f);
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	6f e0       	ldi	r22, 0x0F	; 15
    18de:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <DIO_SetPortDirection>
	DIO_SetPortValue(KEYPAD_PORT , 0xff );
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	6f ef       	ldi	r22, 0xFF	; 255
    18e6:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <KeyPadGetPresedKey>:

u8 KeyPadGetPresedKey(void)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <KeyPadGetPresedKey+0x6>
    18f6:	0f 92       	push	r0
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    for(u8 c =0 ; c<3 ; c++ )
    18fc:	1a 82       	std	Y+2, r1	; 0x02
    18fe:	2c c0       	rjmp	.+88     	; 0x1958 <KeyPadGetPresedKey+0x68>
    {
	DIO_SetPortValue(KEYPAD_PORT , 0b11111111 );
    1900:	83 e0       	ldi	r24, 0x03	; 3
    1902:	6f ef       	ldi	r22, 0xFF	; 255
    1904:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
	DIO_SetPinValue(KEYPAD_PORT , c ,DIO_LOW);
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	6a 81       	ldd	r22, Y+2	; 0x02
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
	for (u8 r =0 ; r< 3 ;r++)
    1912:	19 82       	std	Y+1, r1	; 0x01
    1914:	1b c0       	rjmp	.+54     	; 0x194c <KeyPadGetPresedKey+0x5c>
	{
	if (DIO_GetPinValue(KEYPAD_PORT , 4+r )==0)
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	98 2f       	mov	r25, r24
    191a:	9c 5f       	subi	r25, 0xFC	; 252
    191c:	83 e0       	ldi	r24, 0x03	; 3
    191e:	69 2f       	mov	r22, r25
    1920:	0e 94 54 11 	call	0x22a8	; 0x22a8 <DIO_GetPinValue>
    1924:	88 23       	and	r24, r24
    1926:	79 f4       	brne	.+30     	; 0x1946 <KeyPadGetPresedKey+0x56>
	{
		return (c + (3*r)+1);
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	c9 01       	movw	r24, r18
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	82 0f       	add	r24, r18
    1936:	93 1f       	adc	r25, r19
    1938:	98 2f       	mov	r25, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	89 0f       	add	r24, r25
    193e:	98 2f       	mov	r25, r24
    1940:	9f 5f       	subi	r25, 0xFF	; 255
    1942:	9b 83       	std	Y+3, r25	; 0x03
    1944:	1f c0       	rjmp	.+62     	; 0x1984 <KeyPadGetPresedKey+0x94>
{
    for(u8 c =0 ; c<3 ; c++ )
    {
	DIO_SetPortValue(KEYPAD_PORT , 0b11111111 );
	DIO_SetPinValue(KEYPAD_PORT , c ,DIO_LOW);
	for (u8 r =0 ; r< 3 ;r++)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	10 f3       	brcs	.-60     	; 0x1916 <KeyPadGetPresedKey+0x26>
	DIO_SetPortValue(KEYPAD_PORT , 0xff );
}

u8 KeyPadGetPresedKey(void)
{
    for(u8 c =0 ; c<3 ; c++ )
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	8f 5f       	subi	r24, 0xFF	; 255
    1956:	8a 83       	std	Y+2, r24	; 0x02
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	83 30       	cpi	r24, 0x03	; 3
    195c:	88 f2       	brcs	.-94     	; 0x1900 <KeyPadGetPresedKey+0x10>
		return (c + (3*r)+1);
		 _delay_ms(100);
	}
	}
    }
    DIO_SetPortValue(KEYPAD_PORT , 0b11111111 );
    195e:	83 e0       	ldi	r24, 0x03	; 3
    1960:	6f ef       	ldi	r22, 0xFF	; 255
    1962:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
    DIO_SetPinValue(KEYPAD_PORT , 0 ,DIO_LOW);
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
    if (DIO_GetPinValue(KEYPAD_PORT , 7 )==0)
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	67 e0       	ldi	r22, 0x07	; 7
    1974:	0e 94 54 11 	call	0x22a8	; 0x22a8 <DIO_GetPinValue>
    1978:	88 23       	and	r24, r24
    197a:	11 f4       	brne	.+4      	; 0x1980 <KeyPadGetPresedKey+0x90>
    {
    	return 0;
    197c:	1b 82       	std	Y+3, r1	; 0x03
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <KeyPadGetPresedKey+0x94>
     _delay_ms(100);

    }

   return 'z' ;
    1980:	8a e7       	ldi	r24, 0x7A	; 122
    1982:	8b 83       	std	Y+3, r24	; 0x03
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <KeyPadGetPresedOperation>:

u8 KeyPadGetPresedOperation(void)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <KeyPadGetPresedOperation+0x6>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPortValue(KEYPAD_PORT , 0b11111111 );
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	6f ef       	ldi	r22, 0xFF	; 255
    19a0:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
	DIO_SetPinValue(KEYPAD_PORT , 3 ,DIO_LOW);
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
	for (u8 r =0 ; r< 4 ;r++)
    19ae:	19 82       	std	Y+1, r1	; 0x01
    19b0:	11 c0       	rjmp	.+34     	; 0x19d4 <KeyPadGetPresedOperation+0x42>
		{
		if (DIO_GetPinValue(KEYPAD_PORT , 4+r )==0)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	98 2f       	mov	r25, r24
    19b6:	9c 5f       	subi	r25, 0xFC	; 252
    19b8:	83 e0       	ldi	r24, 0x03	; 3
    19ba:	69 2f       	mov	r22, r25
    19bc:	0e 94 54 11 	call	0x22a8	; 0x22a8 <DIO_GetPinValue>
    19c0:	88 23       	and	r24, r24
    19c2:	29 f4       	brne	.+10     	; 0x19ce <KeyPadGetPresedOperation+0x3c>
		{
			return (r+1);
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	98 2f       	mov	r25, r24
    19c8:	9f 5f       	subi	r25, 0xFF	; 255
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	07 c0       	rjmp	.+14     	; 0x19dc <KeyPadGetPresedOperation+0x4a>
u8 KeyPadGetPresedOperation(void)
{

	DIO_SetPortValue(KEYPAD_PORT , 0b11111111 );
	DIO_SetPinValue(KEYPAD_PORT , 3 ,DIO_LOW);
	for (u8 r =0 ; r< 4 ;r++)
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	8f 5f       	subi	r24, 0xFF	; 255
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	84 30       	cpi	r24, 0x04	; 4
    19d8:	60 f3       	brcs	.-40     	; 0x19b2 <KeyPadGetPresedOperation+0x20>
		{
			return (r+1);
			 _delay_ms(100);
		}
		}
	return 0 ;
    19da:	1a 82       	std	Y+2, r1	; 0x02
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <KeyPadAskForResult>:



  u8 KeyPadAskForResult(void)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	0f 92       	push	r0
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortValue(KEYPAD_PORT , 0b11111111 );
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	6f ef       	ldi	r22, 0xFF	; 255
    19f6:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
	DIO_SetPinValue(KEYPAD_PORT , 2 ,DIO_LOW);
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	62 e0       	ldi	r22, 0x02	; 2
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
	if (DIO_GetPinValue(KEYPAD_PORT , 7 )==0)
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	67 e0       	ldi	r22, 0x07	; 7
    1a08:	0e 94 54 11 	call	0x22a8	; 0x22a8 <DIO_GetPinValue>
    1a0c:	88 23       	and	r24, r24
    1a0e:	19 f4       	brne	.+6      	; 0x1a16 <KeyPadAskForResult+0x2e>
	{
		return 1 ;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <KeyPadAskForResult+0x30>
	}
	else
	{
		return 0 ;
    1a16:	19 82       	std	Y+1, r1	; 0x01
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <KeyPadAskForSign>:

  u8 KeyPadAskForSign(void)
  {
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	  DIO_SetPortValue(KEYPAD_PORT , 0b11111111 );
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	6f ef       	ldi	r22, 0xFF	; 255
    1a30:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
	  	DIO_SetPinValue(KEYPAD_PORT , 3,DIO_LOW);
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	63 e0       	ldi	r22, 0x03	; 3
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
	  	if (DIO_GetPinValue(KEYPAD_PORT , 6 )==0)
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	66 e0       	ldi	r22, 0x06	; 6
    1a42:	0e 94 54 11 	call	0x22a8	; 0x22a8 <DIO_GetPinValue>
    1a46:	88 23       	and	r24, r24
    1a48:	19 f4       	brne	.+6      	; 0x1a50 <KeyPadAskForSign+0x2e>
	  	{
	  		return 1 ;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <KeyPadAskForSign+0x30>
	  		_delay_ms(100);
	  	}
	  	else
	  	{
	  		return 0 ;
    1a50:	19 82       	std	Y+1, r1	; 0x01
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
	  		_delay_ms(100);
	  	}
  }
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <KeyPadAskForFloat>:
  u8 KeyPadAskForFloat(void)
  {
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	0f 92       	push	r0
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
	  DIO_SetPortValue(KEYPAD_PORT , 0b11111111 );
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	6f ef       	ldi	r22, 0xFF	; 255
    1a6a:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_SetPortValue>
	  	  DIO_SetPinValue(KEYPAD_PORT , 1,DIO_LOW);
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 13 10 	call	0x2026	; 0x2026 <DIO_SetPinValue>
	   	if (DIO_GetPinValue(KEYPAD_PORT , 7 )==0)
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	67 e0       	ldi	r22, 0x07	; 7
    1a7c:	0e 94 54 11 	call	0x22a8	; 0x22a8 <DIO_GetPinValue>
    1a80:	88 23       	and	r24, r24
    1a82:	19 f4       	brne	.+6      	; 0x1a8a <KeyPadAskForFloat+0x2e>
	 	{
	  	  return 1 ;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <KeyPadAskForFloat+0x30>
	  	  _delay_ms(100);
	 	}
	   	else
	   	{
	   		return 0 ;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
	   		_delay_ms(100);
	  	}
  }
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GIE_Enable>:

#include "GIE_INTERFACE.h"
#include "GIE_PRIVTE.h"

void GIE_Enable(void)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1a9e:	af e5       	ldi	r26, 0x5F	; 95
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	ef e5       	ldi	r30, 0x5F	; 95
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 68       	ori	r24, 0x80	; 128
    1aaa:	8c 93       	st	X, r24

}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <GIE_Disable>:
void GIE_Disable(void)

{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1aba:	af e5       	ldi	r26, 0x5F	; 95
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	ef e5       	ldi	r30, 0x5F	; 95
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8f 77       	andi	r24, 0x7F	; 127
    1ac6:	8c 93       	st	X, r24
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <EXIT_Init>:
void (*Global_call_back_int0)(void);
void (*Global_call_back_int1)(void);
void (*Global_call_back_int2)(void);

void EXIT_Init(void)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
#elif SENCE_CONROL_INIT0 == TOGGLE
	SET_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_INPUT);
#elif SENCE_CONROL_INIT0 == FALING_EDGE
		CLR_BIT(MCUCR,ISC00);
    1ad6:	a5 e5       	ldi	r26, 0x55	; 85
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e5       	ldi	r30, 0x55	; 85
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8e 7f       	andi	r24, 0xFE	; 254
    1ae2:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
    1ae4:	a5 e5       	ldi	r26, 0x55	; 85
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e5       	ldi	r30, 0x55	; 85
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	8c 93       	st	X, r24
		DIO_SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    1af2:	83 e0       	ldi	r24, 0x03	; 3
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_SetPinDirection>
#elif SENCE_CONROL_INIT1 == TOGGLE
	SET_BIT(MCUCR,ISC10);
	CLR_BIT(MCUCR,ISC11);
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN3,DIO_INPUT);
#elif SENCE_CONROL_INIT1 == FALING_EDGE
		CLR_BIT(MCUCR,ISC10);
    1afc:	a5 e5       	ldi	r26, 0x55	; 85
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e5 e5       	ldi	r30, 0x55	; 85
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8b 7f       	andi	r24, 0xFB	; 251
    1b08:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
    1b0a:	a5 e5       	ldi	r26, 0x55	; 85
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e5 e5       	ldi	r30, 0x55	; 85
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	88 60       	ori	r24, 0x08	; 8
    1b16:	8c 93       	st	X, r24
		DIO_SetPinDirection(DIO_PORTD,DIO_PIN3,DIO_INPUT);
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	63 e0       	ldi	r22, 0x03	; 3
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_SetPinDirection>
#else
#warning "Wrong choice for SENCE_CONROL_INIT1"
#endif

#if SENCE_CONROL_INIT2 == FALING_EDGE
		CLR_BIT(MCUCSR,ISC2);
    1b22:	a4 e5       	ldi	r26, 0x54	; 84
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e4 e5       	ldi	r30, 0x54	; 84
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8f 7b       	andi	r24, 0xBF	; 191
    1b2e:	8c 93       	st	X, r24
		DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_INPUT);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	62 e0       	ldi	r22, 0x02	; 2
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_SetPinDirection>
	SET_BIT(MCUCSR,ISC2);
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_INPUT);
#else
#warning "Wrong choice for SENCE_CONROL_INIT2"
#endif
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <EXIT_EnableExtint>:


void EXIT_EnableExtint(u8 Initid)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <EXIT_EnableExtint+0x6>
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	switch(Initid)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	3b 83       	std	Y+3, r19	; 0x03
    1b56:	2a 83       	std	Y+2, r18	; 0x02
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5c:	86 30       	cpi	r24, 0x06	; 6
    1b5e:	91 05       	cpc	r25, r1
    1b60:	59 f0       	breq	.+22     	; 0x1b78 <EXIT_EnableExtint+0x38>
    1b62:	2a 81       	ldd	r18, Y+2	; 0x02
    1b64:	3b 81       	ldd	r19, Y+3	; 0x03
    1b66:	27 30       	cpi	r18, 0x07	; 7
    1b68:	31 05       	cpc	r19, r1
    1b6a:	71 f0       	breq	.+28     	; 0x1b88 <EXIT_EnableExtint+0x48>
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b70:	85 30       	cpi	r24, 0x05	; 5
    1b72:	91 05       	cpc	r25, r1
    1b74:	89 f0       	breq	.+34     	; 0x1b98 <EXIT_EnableExtint+0x58>
    1b76:	17 c0       	rjmp	.+46     	; 0x1ba6 <EXIT_EnableExtint+0x66>
	{
	case INTF0 :

		SET_BIT(GICR,INTF0);
    1b78:	ab e5       	ldi	r26, 0x5B	; 91
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	eb e5       	ldi	r30, 0x5B	; 91
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	8c 93       	st	X, r24
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <EXIT_EnableExtint+0x66>

		break;
	case INTF1 :

		SET_BIT(GICR,INTF1);
    1b88:	ab e5       	ldi	r26, 0x5B	; 91
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	eb e5       	ldi	r30, 0x5B	; 91
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	80 68       	ori	r24, 0x80	; 128
    1b94:	8c 93       	st	X, r24
    1b96:	07 c0       	rjmp	.+14     	; 0x1ba6 <EXIT_EnableExtint+0x66>

		break;
	case INTF2 :

		SET_BIT(GICR,INTF2);
    1b98:	ab e5       	ldi	r26, 0x5B	; 91
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	eb e5       	ldi	r30, 0x5B	; 91
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 62       	ori	r24, 0x20	; 32
    1ba4:	8c 93       	st	X, r24

		break;
	}
}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <EXIT_DisableExtint>:


void EXIT_DisableExtint(u8 Initid)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <EXIT_DisableExtint+0x6>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	89 83       	std	Y+1, r24	; 0x01
	switch(Initid)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	3b 83       	std	Y+3, r19	; 0x03
    1bc8:	2a 83       	std	Y+2, r18	; 0x02
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bce:	86 30       	cpi	r24, 0x06	; 6
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	59 f0       	breq	.+22     	; 0x1bea <EXIT_DisableExtint+0x38>
    1bd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd6:	3b 81       	ldd	r19, Y+3	; 0x03
    1bd8:	27 30       	cpi	r18, 0x07	; 7
    1bda:	31 05       	cpc	r19, r1
    1bdc:	71 f0       	breq	.+28     	; 0x1bfa <EXIT_DisableExtint+0x48>
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	9b 81       	ldd	r25, Y+3	; 0x03
    1be2:	85 30       	cpi	r24, 0x05	; 5
    1be4:	91 05       	cpc	r25, r1
    1be6:	89 f0       	breq	.+34     	; 0x1c0a <EXIT_DisableExtint+0x58>
    1be8:	17 c0       	rjmp	.+46     	; 0x1c18 <EXIT_DisableExtint+0x66>
	{
	case INTF0 :

		CLR_BIT(GICR,INTF0);
    1bea:	ab e5       	ldi	r26, 0x5B	; 91
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb e5       	ldi	r30, 0x5B	; 91
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8f 7b       	andi	r24, 0xBF	; 191
    1bf6:	8c 93       	st	X, r24
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <EXIT_DisableExtint+0x66>

		break;
	case INTF1 :

		CLR_BIT(GICR,INTF1);
    1bfa:	ab e5       	ldi	r26, 0x5B	; 91
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e5       	ldi	r30, 0x5B	; 91
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8f 77       	andi	r24, 0x7F	; 127
    1c06:	8c 93       	st	X, r24
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <EXIT_DisableExtint+0x66>

		break;
	case INTF2 :

		CLR_BIT(GICR,INTF2);
    1c0a:	ab e5       	ldi	r26, 0x5B	; 91
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	eb e5       	ldi	r30, 0x5B	; 91
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8f 7d       	andi	r24, 0xDF	; 223
    1c16:	8c 93       	st	X, r24

		break;
	}
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <EXTI_SetCallBack>:


void EXTI_SetCallBack(u8 intid,void (*FPTR)(void))
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <EXTI_SetCallBack+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <EXTI_SetCallBack+0x8>
    1c2c:	0f 92       	push	r0
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	7b 83       	std	Y+3, r23	; 0x03
    1c36:	6a 83       	std	Y+2, r22	; 0x02
	switch(intid)
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	3d 83       	std	Y+5, r19	; 0x05
    1c40:	2c 83       	std	Y+4, r18	; 0x04
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	9d 81       	ldd	r25, Y+5	; 0x05
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	91 05       	cpc	r25, r1
    1c4a:	81 f0       	breq	.+32     	; 0x1c6c <EXTI_SetCallBack+0x48>
    1c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	91 f0       	breq	.+36     	; 0x1c7a <EXTI_SetCallBack+0x56>
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	a1 f4       	brne	.+40     	; 0x1c86 <EXTI_SetCallBack+0x62>
	{
	case int0:
		Global_call_back_int0=FPTR;
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	9b 81       	ldd	r25, Y+3	; 0x03
    1c62:	90 93 bf 00 	sts	0x00BF, r25
    1c66:	80 93 be 00 	sts	0x00BE, r24
    1c6a:	0d c0       	rjmp	.+26     	; 0x1c86 <EXTI_SetCallBack+0x62>
		break;
	case int1:
		Global_call_back_int1=FPTR;
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c70:	90 93 bb 00 	sts	0x00BB, r25
    1c74:	80 93 ba 00 	sts	0x00BA, r24
    1c78:	06 c0       	rjmp	.+12     	; 0x1c86 <EXTI_SetCallBack+0x62>
		break;
	case int2:
		Global_call_back_int2=FPTR;
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	90 93 bd 00 	sts	0x00BD, r25
    1c82:	80 93 bc 00 	sts	0x00BC, r24
		break;
	}

}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <__vector_1>:

void __vector_1(void)__attribute__((signal));

void __vector_1(void)
{
    1c96:	1f 92       	push	r1
    1c98:	0f 92       	push	r0
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	0f 92       	push	r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	2f 93       	push	r18
    1ca2:	3f 93       	push	r19
    1ca4:	4f 93       	push	r20
    1ca6:	5f 93       	push	r21
    1ca8:	6f 93       	push	r22
    1caa:	7f 93       	push	r23
    1cac:	8f 93       	push	r24
    1cae:	9f 93       	push	r25
    1cb0:	af 93       	push	r26
    1cb2:	bf 93       	push	r27
    1cb4:	ef 93       	push	r30
    1cb6:	ff 93       	push	r31
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
	Global_call_back_int0();
    1cc0:	e0 91 be 00 	lds	r30, 0x00BE
    1cc4:	f0 91 bf 00 	lds	r31, 0x00BF
    1cc8:	09 95       	icall
}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	ff 91       	pop	r31
    1cd0:	ef 91       	pop	r30
    1cd2:	bf 91       	pop	r27
    1cd4:	af 91       	pop	r26
    1cd6:	9f 91       	pop	r25
    1cd8:	8f 91       	pop	r24
    1cda:	7f 91       	pop	r23
    1cdc:	6f 91       	pop	r22
    1cde:	5f 91       	pop	r21
    1ce0:	4f 91       	pop	r20
    1ce2:	3f 91       	pop	r19
    1ce4:	2f 91       	pop	r18
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	0f 90       	pop	r0
    1cec:	1f 90       	pop	r1
    1cee:	18 95       	reti

00001cf0 <__vector_2>:
void __vector_2(void)__attribute__((signal));

void __vector_2(void)
{
    1cf0:	1f 92       	push	r1
    1cf2:	0f 92       	push	r0
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	0f 92       	push	r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	2f 93       	push	r18
    1cfc:	3f 93       	push	r19
    1cfe:	4f 93       	push	r20
    1d00:	5f 93       	push	r21
    1d02:	6f 93       	push	r22
    1d04:	7f 93       	push	r23
    1d06:	8f 93       	push	r24
    1d08:	9f 93       	push	r25
    1d0a:	af 93       	push	r26
    1d0c:	bf 93       	push	r27
    1d0e:	ef 93       	push	r30
    1d10:	ff 93       	push	r31
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	Global_call_back_int1();
    1d1a:	e0 91 ba 00 	lds	r30, 0x00BA
    1d1e:	f0 91 bb 00 	lds	r31, 0x00BB
    1d22:	09 95       	icall
}
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	ff 91       	pop	r31
    1d2a:	ef 91       	pop	r30
    1d2c:	bf 91       	pop	r27
    1d2e:	af 91       	pop	r26
    1d30:	9f 91       	pop	r25
    1d32:	8f 91       	pop	r24
    1d34:	7f 91       	pop	r23
    1d36:	6f 91       	pop	r22
    1d38:	5f 91       	pop	r21
    1d3a:	4f 91       	pop	r20
    1d3c:	3f 91       	pop	r19
    1d3e:	2f 91       	pop	r18
    1d40:	0f 90       	pop	r0
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	0f 90       	pop	r0
    1d46:	1f 90       	pop	r1
    1d48:	18 95       	reti

00001d4a <__vector_3>:
void __vector_3(void)__attribute__((signal));

void __vector_3(void)
{
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	0f 92       	push	r0
    1d52:	11 24       	eor	r1, r1
    1d54:	2f 93       	push	r18
    1d56:	3f 93       	push	r19
    1d58:	4f 93       	push	r20
    1d5a:	5f 93       	push	r21
    1d5c:	6f 93       	push	r22
    1d5e:	7f 93       	push	r23
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	ef 93       	push	r30
    1d6a:	ff 93       	push	r31
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
	Global_call_back_int2();
    1d74:	e0 91 bc 00 	lds	r30, 0x00BC
    1d78:	f0 91 bd 00 	lds	r31, 0x00BD
    1d7c:	09 95       	icall
}
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	ff 91       	pop	r31
    1d84:	ef 91       	pop	r30
    1d86:	bf 91       	pop	r27
    1d88:	af 91       	pop	r26
    1d8a:	9f 91       	pop	r25
    1d8c:	8f 91       	pop	r24
    1d8e:	7f 91       	pop	r23
    1d90:	6f 91       	pop	r22
    1d92:	5f 91       	pop	r21
    1d94:	4f 91       	pop	r20
    1d96:	3f 91       	pop	r19
    1d98:	2f 91       	pop	r18
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	0f 90       	pop	r0
    1da0:	1f 90       	pop	r1
    1da2:	18 95       	reti

00001da4 <DIO_SetPinDirection>:
#include"../LIB/BIT_MATH.h"
#include "DIO_PRIV.h"
#include "DIO_CONFIG.h"

void DIO_SetPinDirection(u8 portNumber , u8 pinNumber , u8 direction)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	27 97       	sbiw	r28, 0x07	; 7
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	6a 83       	std	Y+2, r22	; 0x02
    1dbc:	4b 83       	std	Y+3, r20	; 0x03
	if (direction==1)
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <DIO_SetPinDirection+0x22>
    1dc4:	6f c0       	rjmp	.+222    	; 0x1ea4 <DIO_SetPinDirection+0x100>
	{
		switch(portNumber)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3f 83       	std	Y+7, r19	; 0x07
    1dce:	2e 83       	std	Y+6, r18	; 0x06
    1dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	49 f1       	breq	.+82     	; 0x1e2c <DIO_SetPinDirection+0x88>
    1dda:	2e 81       	ldd	r18, Y+6	; 0x06
    1ddc:	3f 81       	ldd	r19, Y+7	; 0x07
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	2c f4       	brge	.+10     	; 0x1dee <DIO_SetPinDirection+0x4a>
    1de4:	8e 81       	ldd	r24, Y+6	; 0x06
    1de6:	9f 81       	ldd	r25, Y+7	; 0x07
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	61 f0       	breq	.+24     	; 0x1e04 <DIO_SetPinDirection+0x60>
    1dec:	d2 c0       	rjmp	.+420    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
    1dee:	2e 81       	ldd	r18, Y+6	; 0x06
    1df0:	3f 81       	ldd	r19, Y+7	; 0x07
    1df2:	22 30       	cpi	r18, 0x02	; 2
    1df4:	31 05       	cpc	r19, r1
    1df6:	71 f1       	breq	.+92     	; 0x1e54 <DIO_SetPinDirection+0xb0>
    1df8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1dfc:	83 30       	cpi	r24, 0x03	; 3
    1dfe:	91 05       	cpc	r25, r1
    1e00:	e9 f1       	breq	.+122    	; 0x1e7c <DIO_SetPinDirection+0xd8>
    1e02:	c7 c0       	rjmp	.+398    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
		{
		case 0:
			        SET_BIT(DDRA , pinNumber);
    1e04:	aa e3       	ldi	r26, 0x3A	; 58
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	ea e3       	ldi	r30, 0x3A	; 58
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_SetPinDirection+0x7e>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_SetPinDirection+0x7a>
    1e26:	84 2b       	or	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	b3 c0       	rjmp	.+358    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
			        break ;
		case 1:
					SET_BIT(DDRB , pinNumber);
    1e2c:	a7 e3       	ldi	r26, 0x37	; 55
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e7 e3       	ldi	r30, 0x37	; 55
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_SetPinDirection+0xa6>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <DIO_SetPinDirection+0xa2>
    1e4e:	84 2b       	or	r24, r20
    1e50:	8c 93       	st	X, r24
    1e52:	9f c0       	rjmp	.+318    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
					break ;
		case 2:
					SET_BIT(DDRC , pinNumber);
    1e54:	a4 e3       	ldi	r26, 0x34	; 52
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e4 e3       	ldi	r30, 0x34	; 52
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_SetPinDirection+0xce>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_SetPinDirection+0xca>
    1e76:	84 2b       	or	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	8b c0       	rjmp	.+278    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
					break ;
		case 3:
					SET_BIT(DDRD , pinNumber);
    1e7c:	a1 e3       	ldi	r26, 0x31	; 49
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e1 e3       	ldi	r30, 0x31	; 49
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <DIO_SetPinDirection+0xf6>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <DIO_SetPinDirection+0xf2>
    1e9e:	84 2b       	or	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	77 c0       	rjmp	.+238    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
					break ;

		}
	}
	else if (direction==0)
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <DIO_SetPinDirection+0x108>
    1eaa:	73 c0       	rjmp	.+230    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
	{
		switch (portNumber)
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	3d 83       	std	Y+5, r19	; 0x05
    1eb4:	2c 83       	std	Y+4, r18	; 0x04
    1eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	59 f1       	breq	.+86     	; 0x1f16 <DIO_SetPinDirection+0x172>
    1ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <DIO_SetPinDirection+0x130>
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f0       	breq	.+26     	; 0x1eec <DIO_SetPinDirection+0x148>
    1ed2:	5f c0       	rjmp	.+190    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
    1ed4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	31 05       	cpc	r19, r1
    1edc:	89 f1       	breq	.+98     	; 0x1f40 <DIO_SetPinDirection+0x19c>
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <DIO_SetPinDirection+0x146>
    1ee8:	40 c0       	rjmp	.+128    	; 0x1f6a <DIO_SetPinDirection+0x1c6>
    1eea:	53 c0       	rjmp	.+166    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
		{
			case 0:
				CLR_BIT(DDRA , pinNumber);
    1eec:	aa e3       	ldi	r26, 0x3A	; 58
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ea e3       	ldi	r30, 0x3A	; 58
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_SetPinDirection+0x166>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_SetPinDirection+0x162>
    1f0e:	80 95       	com	r24
    1f10:	84 23       	and	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	3e c0       	rjmp	.+124    	; 0x1f92 <DIO_SetPinDirection+0x1ee>
	        break ;
			case 1:
				CLR_BIT(DDRB , pinNumber);
    1f16:	a7 e3       	ldi	r26, 0x37	; 55
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e7 e3       	ldi	r30, 0x37	; 55
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_SetPinDirection+0x190>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <DIO_SetPinDirection+0x18c>
    1f38:	80 95       	com	r24
    1f3a:	84 23       	and	r24, r20
    1f3c:	8c 93       	st	X, r24
    1f3e:	29 c0       	rjmp	.+82     	; 0x1f92 <DIO_SetPinDirection+0x1ee>
			break ;
			case 2:
				CLR_BIT(DDRC , pinNumber);
    1f40:	a4 e3       	ldi	r26, 0x34	; 52
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e4 e3       	ldi	r30, 0x34	; 52
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <DIO_SetPinDirection+0x1ba>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <DIO_SetPinDirection+0x1b6>
    1f62:	80 95       	com	r24
    1f64:	84 23       	and	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <DIO_SetPinDirection+0x1ee>
			break ;
			case 3:
				CLR_BIT(DDRD , pinNumber);
    1f6a:	a1 e3       	ldi	r26, 0x31	; 49
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e1 e3       	ldi	r30, 0x31	; 49
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	48 2f       	mov	r20, r24
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 2e       	mov	r0, r18
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <DIO_SetPinDirection+0x1e4>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <DIO_SetPinDirection+0x1e0>
    1f8c:	80 95       	com	r24
    1f8e:	84 23       	and	r24, r20
    1f90:	8c 93       	st	X, r24
			break ;

		}
	}
}
    1f92:	27 96       	adiw	r28, 0x07	; 7
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <DIO_SetPortDirection>:
void DIO_SetPortDirection(u8 portNumber , u8 direction)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <DIO_SetPortDirection+0x6>
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <DIO_SetPortDirection+0x8>
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	6a 83       	std	Y+2, r22	; 0x02
	switch(portNumber)
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	3c 83       	std	Y+4, r19	; 0x04
    1fbc:	2b 83       	std	Y+3, r18	; 0x03
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	d1 f0       	breq	.+52     	; 0x1ffc <DIO_SetPortDirection+0x58>
    1fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fca:	3c 81       	ldd	r19, Y+4	; 0x04
    1fcc:	22 30       	cpi	r18, 0x02	; 2
    1fce:	31 05       	cpc	r19, r1
    1fd0:	2c f4       	brge	.+10     	; 0x1fdc <DIO_SetPortDirection+0x38>
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	61 f0       	breq	.+24     	; 0x1ff2 <DIO_SetPortDirection+0x4e>
    1fda:	1e c0       	rjmp	.+60     	; 0x2018 <DIO_SetPortDirection+0x74>
    1fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fde:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe0:	22 30       	cpi	r18, 0x02	; 2
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	81 f0       	breq	.+32     	; 0x2006 <DIO_SetPortDirection+0x62>
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	83 30       	cpi	r24, 0x03	; 3
    1fec:	91 05       	cpc	r25, r1
    1fee:	81 f0       	breq	.+32     	; 0x2010 <DIO_SetPortDirection+0x6c>
    1ff0:	13 c0       	rjmp	.+38     	; 0x2018 <DIO_SetPortDirection+0x74>
			{
			case 0:
				       DDRA=direction;
    1ff2:	ea e3       	ldi	r30, 0x3A	; 58
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	80 83       	st	Z, r24
    1ffa:	0e c0       	rjmp	.+28     	; 0x2018 <DIO_SetPortDirection+0x74>
				        break ;
			case 1:
				       DDRB=direction;
    1ffc:	e7 e3       	ldi	r30, 0x37	; 55
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	80 83       	st	Z, r24
    2004:	09 c0       	rjmp	.+18     	; 0x2018 <DIO_SetPortDirection+0x74>
						break ;
			case 2:
				       DDRC=direction;
    2006:	e4 e3       	ldi	r30, 0x34	; 52
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	80 83       	st	Z, r24
    200e:	04 c0       	rjmp	.+8      	; 0x2018 <DIO_SetPortDirection+0x74>
						break ;
			case 3:
				       DDRD=direction;
    2010:	e1 e3       	ldi	r30, 0x31	; 49
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	80 83       	st	Z, r24
					 	break ;

			}
}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <DIO_SetPinValue>:
void DIO_SetPinValue(u8 portNumber , u8 pinNumber , u8 value)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	27 97       	sbiw	r28, 0x07	; 7
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	6a 83       	std	Y+2, r22	; 0x02
    203e:	4b 83       	std	Y+3, r20	; 0x03
	if (value==1)
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	09 f0       	breq	.+2      	; 0x2048 <DIO_SetPinValue+0x22>
    2046:	6f c0       	rjmp	.+222    	; 0x2126 <DIO_SetPinValue+0x100>
		{
			switch(portNumber)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3f 83       	std	Y+7, r19	; 0x07
    2050:	2e 83       	std	Y+6, r18	; 0x06
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	9f 81       	ldd	r25, Y+7	; 0x07
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	91 05       	cpc	r25, r1
    205a:	49 f1       	breq	.+82     	; 0x20ae <DIO_SetPinValue+0x88>
    205c:	2e 81       	ldd	r18, Y+6	; 0x06
    205e:	3f 81       	ldd	r19, Y+7	; 0x07
    2060:	22 30       	cpi	r18, 0x02	; 2
    2062:	31 05       	cpc	r19, r1
    2064:	2c f4       	brge	.+10     	; 0x2070 <DIO_SetPinValue+0x4a>
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	61 f0       	breq	.+24     	; 0x2086 <DIO_SetPinValue+0x60>
    206e:	d2 c0       	rjmp	.+420    	; 0x2214 <DIO_SetPinValue+0x1ee>
    2070:	2e 81       	ldd	r18, Y+6	; 0x06
    2072:	3f 81       	ldd	r19, Y+7	; 0x07
    2074:	22 30       	cpi	r18, 0x02	; 2
    2076:	31 05       	cpc	r19, r1
    2078:	71 f1       	breq	.+92     	; 0x20d6 <DIO_SetPinValue+0xb0>
    207a:	8e 81       	ldd	r24, Y+6	; 0x06
    207c:	9f 81       	ldd	r25, Y+7	; 0x07
    207e:	83 30       	cpi	r24, 0x03	; 3
    2080:	91 05       	cpc	r25, r1
    2082:	e9 f1       	breq	.+122    	; 0x20fe <DIO_SetPinValue+0xd8>
    2084:	c7 c0       	rjmp	.+398    	; 0x2214 <DIO_SetPinValue+0x1ee>
			{
			case 0:
				        SET_BIT(PORTA , pinNumber);
    2086:	ab e3       	ldi	r26, 0x3B	; 59
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	eb e3       	ldi	r30, 0x3B	; 59
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <DIO_SetPinValue+0x7e>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <DIO_SetPinValue+0x7a>
    20a8:	84 2b       	or	r24, r20
    20aa:	8c 93       	st	X, r24
    20ac:	b3 c0       	rjmp	.+358    	; 0x2214 <DIO_SetPinValue+0x1ee>
				        break ;
			case 1:
						SET_BIT(PORTB , pinNumber);
    20ae:	a8 e3       	ldi	r26, 0x38	; 56
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e8 e3       	ldi	r30, 0x38	; 56
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	48 2f       	mov	r20, r24
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 2e       	mov	r0, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <DIO_SetPinValue+0xa6>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	0a 94       	dec	r0
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <DIO_SetPinValue+0xa2>
    20d0:	84 2b       	or	r24, r20
    20d2:	8c 93       	st	X, r24
    20d4:	9f c0       	rjmp	.+318    	; 0x2214 <DIO_SetPinValue+0x1ee>
						break ;
			case 2:
						SET_BIT(PORTC , pinNumber);
    20d6:	a5 e3       	ldi	r26, 0x35	; 53
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e5 e3       	ldi	r30, 0x35	; 53
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 2e       	mov	r0, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <DIO_SetPinValue+0xce>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <DIO_SetPinValue+0xca>
    20f8:	84 2b       	or	r24, r20
    20fa:	8c 93       	st	X, r24
    20fc:	8b c0       	rjmp	.+278    	; 0x2214 <DIO_SetPinValue+0x1ee>
						break ;
			case 3:
						SET_BIT(PORTD , pinNumber);
    20fe:	a2 e3       	ldi	r26, 0x32	; 50
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e2 e3       	ldi	r30, 0x32	; 50
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	48 2f       	mov	r20, r24
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <DIO_SetPinValue+0xf6>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <DIO_SetPinValue+0xf2>
    2120:	84 2b       	or	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	77 c0       	rjmp	.+238    	; 0x2214 <DIO_SetPinValue+0x1ee>
						break ;

			}
		}
		else if (value==0)
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	88 23       	and	r24, r24
    212a:	09 f0       	breq	.+2      	; 0x212e <DIO_SetPinValue+0x108>
    212c:	73 c0       	rjmp	.+230    	; 0x2214 <DIO_SetPinValue+0x1ee>
		{
			switch (portNumber)
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	3d 83       	std	Y+5, r19	; 0x05
    2136:	2c 83       	std	Y+4, r18	; 0x04
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	91 05       	cpc	r25, r1
    2140:	59 f1       	breq	.+86     	; 0x2198 <DIO_SetPinValue+0x172>
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	22 30       	cpi	r18, 0x02	; 2
    2148:	31 05       	cpc	r19, r1
    214a:	2c f4       	brge	.+10     	; 0x2156 <DIO_SetPinValue+0x130>
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f0       	breq	.+26     	; 0x216e <DIO_SetPinValue+0x148>
    2154:	5f c0       	rjmp	.+190    	; 0x2214 <DIO_SetPinValue+0x1ee>
    2156:	2c 81       	ldd	r18, Y+4	; 0x04
    2158:	3d 81       	ldd	r19, Y+5	; 0x05
    215a:	22 30       	cpi	r18, 0x02	; 2
    215c:	31 05       	cpc	r19, r1
    215e:	89 f1       	breq	.+98     	; 0x21c2 <DIO_SetPinValue+0x19c>
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	9d 81       	ldd	r25, Y+5	; 0x05
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	91 05       	cpc	r25, r1
    2168:	09 f4       	brne	.+2      	; 0x216c <DIO_SetPinValue+0x146>
    216a:	40 c0       	rjmp	.+128    	; 0x21ec <DIO_SetPinValue+0x1c6>
    216c:	53 c0       	rjmp	.+166    	; 0x2214 <DIO_SetPinValue+0x1ee>
			{
				case 0:
					CLR_BIT(PORTA , pinNumber);
    216e:	ab e3       	ldi	r26, 0x3B	; 59
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	eb e3       	ldi	r30, 0x3B	; 59
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	48 2f       	mov	r20, r24
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	02 2e       	mov	r0, r18
    2186:	02 c0       	rjmp	.+4      	; 0x218c <DIO_SetPinValue+0x166>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	0a 94       	dec	r0
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <DIO_SetPinValue+0x162>
    2190:	80 95       	com	r24
    2192:	84 23       	and	r24, r20
    2194:	8c 93       	st	X, r24
    2196:	3e c0       	rjmp	.+124    	; 0x2214 <DIO_SetPinValue+0x1ee>
		        break ;
				case 1:
					CLR_BIT(PORTB , pinNumber);
    2198:	a8 e3       	ldi	r26, 0x38	; 56
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e8 e3       	ldi	r30, 0x38	; 56
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	48 2f       	mov	r20, r24
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	02 2e       	mov	r0, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <DIO_SetPinValue+0x190>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	0a 94       	dec	r0
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <DIO_SetPinValue+0x18c>
    21ba:	80 95       	com	r24
    21bc:	84 23       	and	r24, r20
    21be:	8c 93       	st	X, r24
    21c0:	29 c0       	rjmp	.+82     	; 0x2214 <DIO_SetPinValue+0x1ee>
				break ;
				case 2:
					CLR_BIT(PORTC , pinNumber);
    21c2:	a5 e3       	ldi	r26, 0x35	; 53
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e5 e3       	ldi	r30, 0x35	; 53
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	48 2f       	mov	r20, r24
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 2e       	mov	r0, r18
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <DIO_SetPinValue+0x1ba>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	0a 94       	dec	r0
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <DIO_SetPinValue+0x1b6>
    21e4:	80 95       	com	r24
    21e6:	84 23       	and	r24, r20
    21e8:	8c 93       	st	X, r24
    21ea:	14 c0       	rjmp	.+40     	; 0x2214 <DIO_SetPinValue+0x1ee>
				break ;
				case 3:
					CLR_BIT(PORTD , pinNumber);
    21ec:	a2 e3       	ldi	r26, 0x32	; 50
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e2 e3       	ldi	r30, 0x32	; 50
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	48 2f       	mov	r20, r24
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	02 2e       	mov	r0, r18
    2204:	02 c0       	rjmp	.+4      	; 0x220a <DIO_SetPinValue+0x1e4>
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	0a 94       	dec	r0
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <DIO_SetPinValue+0x1e0>
    220e:	80 95       	com	r24
    2210:	84 23       	and	r24, r20
    2212:	8c 93       	st	X, r24
				break ;

			}
		}
}
    2214:	27 96       	adiw	r28, 0x07	; 7
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <DIO_SetPortValue>:
void DIO_SetPortValue(u8 portNumber , u8 value )
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <DIO_SetPortValue+0x6>
    222c:	00 d0       	rcall	.+0      	; 0x222e <DIO_SetPortValue+0x8>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	6a 83       	std	Y+2, r22	; 0x02
	switch(portNumber)
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	3c 83       	std	Y+4, r19	; 0x04
    223e:	2b 83       	std	Y+3, r18	; 0x03
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	91 05       	cpc	r25, r1
    2248:	d1 f0       	breq	.+52     	; 0x227e <DIO_SetPortValue+0x58>
    224a:	2b 81       	ldd	r18, Y+3	; 0x03
    224c:	3c 81       	ldd	r19, Y+4	; 0x04
    224e:	22 30       	cpi	r18, 0x02	; 2
    2250:	31 05       	cpc	r19, r1
    2252:	2c f4       	brge	.+10     	; 0x225e <DIO_SetPortValue+0x38>
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	61 f0       	breq	.+24     	; 0x2274 <DIO_SetPortValue+0x4e>
    225c:	1e c0       	rjmp	.+60     	; 0x229a <DIO_SetPortValue+0x74>
    225e:	2b 81       	ldd	r18, Y+3	; 0x03
    2260:	3c 81       	ldd	r19, Y+4	; 0x04
    2262:	22 30       	cpi	r18, 0x02	; 2
    2264:	31 05       	cpc	r19, r1
    2266:	81 f0       	breq	.+32     	; 0x2288 <DIO_SetPortValue+0x62>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	83 30       	cpi	r24, 0x03	; 3
    226e:	91 05       	cpc	r25, r1
    2270:	81 f0       	breq	.+32     	; 0x2292 <DIO_SetPortValue+0x6c>
    2272:	13 c0       	rjmp	.+38     	; 0x229a <DIO_SetPortValue+0x74>
				{
				case 0:
					       PORTA=value;
    2274:	eb e3       	ldi	r30, 0x3B	; 59
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	80 83       	st	Z, r24
    227c:	0e c0       	rjmp	.+28     	; 0x229a <DIO_SetPortValue+0x74>
					        break ;
				case 1:
					       PORTB=value;
    227e:	e8 e3       	ldi	r30, 0x38	; 56
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	80 83       	st	Z, r24
    2286:	09 c0       	rjmp	.+18     	; 0x229a <DIO_SetPortValue+0x74>
							break ;
				case 2:
							PORTC=value;
    2288:	e5 e3       	ldi	r30, 0x35	; 53
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	80 83       	st	Z, r24
    2290:	04 c0       	rjmp	.+8      	; 0x229a <DIO_SetPortValue+0x74>
							break ;
				case 3:
							PORTD=value;
    2292:	e2 e3       	ldi	r30, 0x32	; 50
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	80 83       	st	Z, r24
						 	break ;

				}
}
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 portNumber , u8 pinNumber )
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <DIO_GetPinValue+0x6>
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <DIO_GetPinValue+0x8>
    22b0:	0f 92       	push	r0
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	8a 83       	std	Y+2, r24	; 0x02
    22b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 result = 0 ;
    22ba:	19 82       	std	Y+1, r1	; 0x01
	switch (portNumber)
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	3d 83       	std	Y+5, r19	; 0x05
    22c4:	2c 83       	std	Y+4, r18	; 0x04
    22c6:	4c 81       	ldd	r20, Y+4	; 0x04
    22c8:	5d 81       	ldd	r21, Y+5	; 0x05
    22ca:	41 30       	cpi	r20, 0x01	; 1
    22cc:	51 05       	cpc	r21, r1
    22ce:	41 f1       	breq	.+80     	; 0x2320 <DIO_GetPinValue+0x78>
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	9d 81       	ldd	r25, Y+5	; 0x05
    22d4:	82 30       	cpi	r24, 0x02	; 2
    22d6:	91 05       	cpc	r25, r1
    22d8:	34 f4       	brge	.+12     	; 0x22e6 <DIO_GetPinValue+0x3e>
    22da:	2c 81       	ldd	r18, Y+4	; 0x04
    22dc:	3d 81       	ldd	r19, Y+5	; 0x05
    22de:	21 15       	cp	r18, r1
    22e0:	31 05       	cpc	r19, r1
    22e2:	61 f0       	breq	.+24     	; 0x22fc <DIO_GetPinValue+0x54>
    22e4:	52 c0       	rjmp	.+164    	; 0x238a <DIO_GetPinValue+0xe2>
    22e6:	4c 81       	ldd	r20, Y+4	; 0x04
    22e8:	5d 81       	ldd	r21, Y+5	; 0x05
    22ea:	42 30       	cpi	r20, 0x02	; 2
    22ec:	51 05       	cpc	r21, r1
    22ee:	51 f1       	breq	.+84     	; 0x2344 <DIO_GetPinValue+0x9c>
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	9d 81       	ldd	r25, Y+5	; 0x05
    22f4:	83 30       	cpi	r24, 0x03	; 3
    22f6:	91 05       	cpc	r25, r1
    22f8:	b9 f1       	breq	.+110    	; 0x2368 <DIO_GetPinValue+0xc0>
    22fa:	47 c0       	rjmp	.+142    	; 0x238a <DIO_GetPinValue+0xe2>
				{
					case 0:
						result =	GET_BIT(PINA , pinNumber);
    22fc:	e9 e3       	ldi	r30, 0x39	; 57
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a9 01       	movw	r20, r18
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <DIO_GetPinValue+0x6c>
    2310:	55 95       	asr	r21
    2312:	47 95       	ror	r20
    2314:	8a 95       	dec	r24
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <DIO_GetPinValue+0x68>
    2318:	ca 01       	movw	r24, r20
    231a:	81 70       	andi	r24, 0x01	; 1
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	35 c0       	rjmp	.+106    	; 0x238a <DIO_GetPinValue+0xe2>
			        break ;
					case 1:
						result =	GET_BIT(PINB , pinNumber);
    2320:	e6 e3       	ldi	r30, 0x36	; 54
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a9 01       	movw	r20, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <DIO_GetPinValue+0x90>
    2334:	55 95       	asr	r21
    2336:	47 95       	ror	r20
    2338:	8a 95       	dec	r24
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <DIO_GetPinValue+0x8c>
    233c:	ca 01       	movw	r24, r20
    233e:	81 70       	andi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	23 c0       	rjmp	.+70     	; 0x238a <DIO_GetPinValue+0xe2>
					break ;
					case 2:
						result =	GET_BIT(PINC , pinNumber);
    2344:	e3 e3       	ldi	r30, 0x33	; 51
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a9 01       	movw	r20, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <DIO_GetPinValue+0xb4>
    2358:	55 95       	asr	r21
    235a:	47 95       	ror	r20
    235c:	8a 95       	dec	r24
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <DIO_GetPinValue+0xb0>
    2360:	ca 01       	movw	r24, r20
    2362:	81 70       	andi	r24, 0x01	; 1
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	11 c0       	rjmp	.+34     	; 0x238a <DIO_GetPinValue+0xe2>
					break ;
					case 3:
						result =		GET_BIT(PIND , pinNumber);
    2368:	e0 e3       	ldi	r30, 0x30	; 48
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a9 01       	movw	r20, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <DIO_GetPinValue+0xd8>
    237c:	55 95       	asr	r21
    237e:	47 95       	ror	r20
    2380:	8a 95       	dec	r24
    2382:	e2 f7       	brpl	.-8      	; 0x237c <DIO_GetPinValue+0xd4>
    2384:	ca 01       	movw	r24, r20
    2386:	81 70       	andi	r24, 0x01	; 1
    2388:	89 83       	std	Y+1, r24	; 0x01
					break ;

				}
	return result ;
    238a:	89 81       	ldd	r24, Y+1	; 0x01

}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <DIO_GetPortValue>:
u8 DIO_GetPortValue(u8 PortNumber)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <DIO_GetPortValue+0x6>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <DIO_GetPortValue+0x8>
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 result = 0 ;
    23aa:	19 82       	std	Y+1, r1	; 0x01
		switch (PortNumber)
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	3c 83       	std	Y+4, r19	; 0x04
    23b4:	2b 83       	std	Y+3, r18	; 0x03
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	91 05       	cpc	r25, r1
    23be:	d1 f0       	breq	.+52     	; 0x23f4 <DIO_GetPortValue+0x58>
    23c0:	2b 81       	ldd	r18, Y+3	; 0x03
    23c2:	3c 81       	ldd	r19, Y+4	; 0x04
    23c4:	22 30       	cpi	r18, 0x02	; 2
    23c6:	31 05       	cpc	r19, r1
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <DIO_GetPortValue+0x38>
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	61 f0       	breq	.+24     	; 0x23ea <DIO_GetPortValue+0x4e>
    23d2:	1e c0       	rjmp	.+60     	; 0x2410 <DIO_GetPortValue+0x74>
    23d4:	2b 81       	ldd	r18, Y+3	; 0x03
    23d6:	3c 81       	ldd	r19, Y+4	; 0x04
    23d8:	22 30       	cpi	r18, 0x02	; 2
    23da:	31 05       	cpc	r19, r1
    23dc:	81 f0       	breq	.+32     	; 0x23fe <DIO_GetPortValue+0x62>
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	83 30       	cpi	r24, 0x03	; 3
    23e4:	91 05       	cpc	r25, r1
    23e6:	81 f0       	breq	.+32     	; 0x2408 <DIO_GetPortValue+0x6c>
    23e8:	13 c0       	rjmp	.+38     	; 0x2410 <DIO_GetPortValue+0x74>
					{
						case 0:
							result =	PINA;
    23ea:	e9 e3       	ldi	r30, 0x39	; 57
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	0e c0       	rjmp	.+28     	; 0x2410 <DIO_GetPortValue+0x74>
				        break ;
						case 1:
							result =	PINB;
    23f4:	e6 e3       	ldi	r30, 0x36	; 54
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	09 c0       	rjmp	.+18     	; 0x2410 <DIO_GetPortValue+0x74>
						break ;
						case 2:
							result =	PINC;
    23fe:	e3 e3       	ldi	r30, 0x33	; 51
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	04 c0       	rjmp	.+8      	; 0x2410 <DIO_GetPortValue+0x74>
						break ;
						case 3:
							result =    PIND;
    2408:	e0 e3       	ldi	r30, 0x30	; 48
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	89 83       	std	Y+1, r24	; 0x01
						break ;

					}
		return result ;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <DIO_TooglePinValue>:
void DIO_TooglePinValue(u8 PortNumber,u8 pinNumber)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	00 d0       	rcall	.+0      	; 0x2426 <DIO_TooglePinValue+0x6>
    2426:	00 d0       	rcall	.+0      	; 0x2428 <DIO_TooglePinValue+0x8>
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNumber)
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	3c 83       	std	Y+4, r19	; 0x04
    2438:	2b 83       	std	Y+3, r18	; 0x03
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	81 30       	cpi	r24, 0x01	; 1
    2440:	91 05       	cpc	r25, r1
    2442:	49 f1       	breq	.+82     	; 0x2496 <DIO_TooglePinValue+0x76>
    2444:	2b 81       	ldd	r18, Y+3	; 0x03
    2446:	3c 81       	ldd	r19, Y+4	; 0x04
    2448:	22 30       	cpi	r18, 0x02	; 2
    244a:	31 05       	cpc	r19, r1
    244c:	2c f4       	brge	.+10     	; 0x2458 <DIO_TooglePinValue+0x38>
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	61 f0       	breq	.+24     	; 0x246e <DIO_TooglePinValue+0x4e>
    2456:	5a c0       	rjmp	.+180    	; 0x250c <DIO_TooglePinValue+0xec>
    2458:	2b 81       	ldd	r18, Y+3	; 0x03
    245a:	3c 81       	ldd	r19, Y+4	; 0x04
    245c:	22 30       	cpi	r18, 0x02	; 2
    245e:	31 05       	cpc	r19, r1
    2460:	71 f1       	breq	.+92     	; 0x24be <DIO_TooglePinValue+0x9e>
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	9c 81       	ldd	r25, Y+4	; 0x04
    2466:	83 30       	cpi	r24, 0x03	; 3
    2468:	91 05       	cpc	r25, r1
    246a:	e9 f1       	breq	.+122    	; 0x24e6 <DIO_TooglePinValue+0xc6>
    246c:	4f c0       	rjmp	.+158    	; 0x250c <DIO_TooglePinValue+0xec>
	{
	case 0:
		TOGGLE_BIT(PORTA,pinNumber);
    246e:	ab e3       	ldi	r26, 0x3B	; 59
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	eb e3       	ldi	r30, 0x3B	; 59
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	48 2f       	mov	r20, r24
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	02 2e       	mov	r0, r18
    2486:	02 c0       	rjmp	.+4      	; 0x248c <DIO_TooglePinValue+0x6c>
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	0a 94       	dec	r0
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <DIO_TooglePinValue+0x68>
    2490:	84 27       	eor	r24, r20
    2492:	8c 93       	st	X, r24
    2494:	3b c0       	rjmp	.+118    	; 0x250c <DIO_TooglePinValue+0xec>
		break;
	case 1:
		TOGGLE_BIT(PORTB,pinNumber);
    2496:	a8 e3       	ldi	r26, 0x38	; 56
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e8 e3       	ldi	r30, 0x38	; 56
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	48 2f       	mov	r20, r24
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 2e       	mov	r0, r18
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <DIO_TooglePinValue+0x94>
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	0a 94       	dec	r0
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <DIO_TooglePinValue+0x90>
    24b8:	84 27       	eor	r24, r20
    24ba:	8c 93       	st	X, r24
    24bc:	27 c0       	rjmp	.+78     	; 0x250c <DIO_TooglePinValue+0xec>
		break;
	case 2:
		TOGGLE_BIT(PORTC,pinNumber);
    24be:	a5 e3       	ldi	r26, 0x35	; 53
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e5 e3       	ldi	r30, 0x35	; 53
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	48 2f       	mov	r20, r24
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	02 2e       	mov	r0, r18
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <DIO_TooglePinValue+0xbc>
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	0a 94       	dec	r0
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <DIO_TooglePinValue+0xb8>
    24e0:	84 27       	eor	r24, r20
    24e2:	8c 93       	st	X, r24
    24e4:	13 c0       	rjmp	.+38     	; 0x250c <DIO_TooglePinValue+0xec>
		break;
	case 3:
		TOGGLE_BIT(PORTD,pinNumber);
    24e6:	a2 e3       	ldi	r26, 0x32	; 50
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e2 e3       	ldi	r30, 0x32	; 50
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	48 2f       	mov	r20, r24
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	02 2e       	mov	r0, r18
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <DIO_TooglePinValue+0xe4>
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	0a 94       	dec	r0
    2506:	e2 f7       	brpl	.-8      	; 0x2500 <DIO_TooglePinValue+0xe0>
    2508:	84 27       	eor	r24, r20
    250a:	8c 93       	st	X, r24
		break;
	}
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <ADC_vodInit>:
#include "ADC_PRIVATE.h"

  static  void (* global_ADCCallback)(void ) = NULL;

void ADC_vodInit(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	//select refrance voltage

	ADMUX |= (ADC_REFERANCE_VOLTAGE<<6);
    2522:	a7 e2       	ldi	r26, 0x27	; 39
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e7 e2       	ldi	r30, 0x27	; 39
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	80 64       	ori	r24, 0x40	; 64
    252e:	8c 93       	st	X, r24

	//selectDATA ADJUSTMENT
#if ADC_DATA_ADJUSTMENT==RIGHT
	CLR_BIT(ADMUX,ADLAR);
    2530:	a7 e2       	ldi	r26, 0x27	; 39
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e7 e2       	ldi	r30, 0x27	; 39
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8f 7d       	andi	r24, 0xDF	; 223
    253c:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADLAR);
#endif
	// enable aoto trigger and select source
#if AUT_TRIGGER ==DISABLE

	CLR_BIT(ADCSRA,ADATE);
    253e:	a6 e2       	ldi	r26, 0x26	; 38
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e6 e2       	ldi	r30, 0x26	; 38
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	8f 7d       	andi	r24, 0xDF	; 223
    254a:	8c 93       	st	X, r24

#endif
	// enable interrupt

#if ADC_INTERRUPT ==DISABLE
	CLR_BIT(ADCSRA,ADIE);
    254c:	a6 e2       	ldi	r26, 0x26	; 38
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e6 e2       	ldi	r30, 0x26	; 38
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	87 7f       	andi	r24, 0xF7	; 247
    2558:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADIE);
#endif

	// select pre scelar

	ADCSRA &= 0xf8;
    255a:	a6 e2       	ldi	r26, 0x26	; 38
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e6 e2       	ldi	r30, 0x26	; 38
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	88 7f       	andi	r24, 0xF8	; 248
    2566:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER_VALUE ;
    2568:	a6 e2       	ldi	r26, 0x26	; 38
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e6 e2       	ldi	r30, 0x26	; 38
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	86 60       	ori	r24, 0x06	; 6
    2574:	8c 93       	st	X, r24

	// Enable ADC
	SET_BIT(ADCSRA,ADEN);
    2576:	a6 e2       	ldi	r26, 0x26	; 38
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e6 e2       	ldi	r30, 0x26	; 38
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	80 68       	ori	r24, 0x80	; 128
    2582:	8c 93       	st	X, r24
}
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <ADC_u16GetDigitalValue>:
u16 ADC_u16GetDigitalValue(u8 copy_u8ChannelNumber)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <ADC_u16GetDigitalValue+0x6>
    2590:	0f 92       	push	r0
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	8b 83       	std	Y+3, r24	; 0x03
	u16 analog_value =0;
    2598:	1a 82       	std	Y+2, r1	; 0x02
    259a:	19 82       	std	Y+1, r1	; 0x01
	//select channale
	ADMUX &=0xe0;
    259c:	a7 e2       	ldi	r26, 0x27	; 39
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e7 e2       	ldi	r30, 0x27	; 39
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 7e       	andi	r24, 0xE0	; 224
    25a8:	8c 93       	st	X, r24
	ADMUX |=copy_u8ChannelNumber;
    25aa:	a7 e2       	ldi	r26, 0x27	; 39
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e7 e2       	ldi	r30, 0x27	; 39
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	90 81       	ld	r25, Z
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	89 2b       	or	r24, r25
    25b8:	8c 93       	st	X, r24
	if (copy_u8ChannelNumber <8)
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	88 30       	cpi	r24, 0x08	; 8
    25be:	40 f4       	brcc	.+16     	; 0x25d0 <ADC_u16GetDigitalValue+0x46>
	{
	ADMUX |= copy_u8ChannelNumber;
    25c0:	a7 e2       	ldi	r26, 0x27	; 39
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e7 e2       	ldi	r30, 0x27	; 39
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	90 81       	ld	r25, Z
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	89 2b       	or	r24, r25
    25ce:	8c 93       	st	X, r24
	}

	//select conversion

	SET_BIT(ADCSRA,ADSC);
    25d0:	a6 e2       	ldi	r26, 0x26	; 38
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e6 e2       	ldi	r30, 0x26	; 38
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	80 64       	ori	r24, 0x40	; 64
    25dc:	8c 93       	st	X, r24

	//wait for conversion complete
	while (GET_BIT(ADCSRA,ADIF)==0)
    25de:	e6 e2       	ldi	r30, 0x26	; 38
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	82 95       	swap	r24
    25e6:	8f 70       	andi	r24, 0x0F	; 15
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	81 70       	andi	r24, 0x01	; 1
    25ee:	90 70       	andi	r25, 0x00	; 0
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	a9 f3       	breq	.-22     	; 0x25de <ADC_u16GetDigitalValue+0x54>
		{

		}
	//flag clearing

	SET_BIT(ADCSRA,ADIF);
    25f4:	a6 e2       	ldi	r26, 0x26	; 38
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e6 e2       	ldi	r30, 0x26	; 38
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	80 61       	ori	r24, 0x10	; 16
    2600:	8c 93       	st	X, r24
	//return data
	analog_value= ADCL + (ADCH*256);
    2602:	e4 e2       	ldi	r30, 0x24	; 36
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	e5 e2       	ldi	r30, 0x25	; 37
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	98 2f       	mov	r25, r24
    2618:	88 27       	eor	r24, r24
    261a:	82 0f       	add	r24, r18
    261c:	93 1f       	adc	r25, r19
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	89 83       	std	Y+1, r24	; 0x01
	//analog_value =ADCH;
	//analog_value=analog_value<<8;
	//analog_value |= ADCL ;
	return analog_value ;
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <ADC_SetCallBack>:
void ADC_SetCallBack(void (*FPTR)(void))
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <ADC_SetCallBack+0x6>
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
	global_ADCCallback=FPTR;
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	9a 81       	ldd	r25, Y+2	; 0x02
    2644:	90 93 b9 00 	sts	0x00B9, r25
    2648:	80 93 b8 00 	sts	0x00B8, r24
}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <__vector_16>:
void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    2656:	1f 92       	push	r1
    2658:	0f 92       	push	r0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	0f 92       	push	r0
    265e:	11 24       	eor	r1, r1
    2660:	2f 93       	push	r18
    2662:	3f 93       	push	r19
    2664:	4f 93       	push	r20
    2666:	5f 93       	push	r21
    2668:	6f 93       	push	r22
    266a:	7f 93       	push	r23
    266c:	8f 93       	push	r24
    266e:	9f 93       	push	r25
    2670:	af 93       	push	r26
    2672:	bf 93       	push	r27
    2674:	ef 93       	push	r30
    2676:	ff 93       	push	r31
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
	if(global_ADCCallback!=NULL)
    2680:	80 91 b8 00 	lds	r24, 0x00B8
    2684:	90 91 b9 00 	lds	r25, 0x00B9
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	29 f0       	breq	.+10     	; 0x2696 <__vector_16+0x40>
	{
		global_ADCCallback ();
    268c:	e0 91 b8 00 	lds	r30, 0x00B8
    2690:	f0 91 b9 00 	lds	r31, 0x00B9
    2694:	09 95       	icall
	}
}
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	ff 91       	pop	r31
    269c:	ef 91       	pop	r30
    269e:	bf 91       	pop	r27
    26a0:	af 91       	pop	r26
    26a2:	9f 91       	pop	r25
    26a4:	8f 91       	pop	r24
    26a6:	7f 91       	pop	r23
    26a8:	6f 91       	pop	r22
    26aa:	5f 91       	pop	r21
    26ac:	4f 91       	pop	r20
    26ae:	3f 91       	pop	r19
    26b0:	2f 91       	pop	r18
    26b2:	0f 90       	pop	r0
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	0f 90       	pop	r0
    26b8:	1f 90       	pop	r1
    26ba:	18 95       	reti

000026bc <ADC_vodEnable>:
void ADC_vodEnable(void)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    26c4:	a6 e2       	ldi	r26, 0x26	; 38
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e6 e2       	ldi	r30, 0x26	; 38
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	80 68       	ori	r24, 0x80	; 128
    26d0:	8c 93       	st	X, r24
}
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <ADC_vodDisable>:
void ADC_vodDisable(void)
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADEN);
    26e0:	a6 e2       	ldi	r26, 0x26	; 38
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e6 e2       	ldi	r30, 0x26	; 38
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 77       	andi	r24, 0x7F	; 127
    26ec:	8c 93       	st	X, r24
}
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <ADC_vodEnableInterupt>:
void ADC_vodEnableInterupt(void)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    26fc:	a6 e2       	ldi	r26, 0x26	; 38
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e6 e2       	ldi	r30, 0x26	; 38
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	88 60       	ori	r24, 0x08	; 8
    2708:	8c 93       	st	X, r24
}
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <ADC_vodDisableInterupt>:
void ADC_vodDisableInterupt(void)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
    2718:	a6 e2       	ldi	r26, 0x26	; 38
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e6 e2       	ldi	r30, 0x26	; 38
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	87 7f       	andi	r24, 0xF7	; 247
    2724:	8c 93       	st	X, r24
}
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <main>:
#include "KEYPADDR/KEYBAD_INER.h"
#include <util/delay.h>


int main (void)
{
    272c:	1f 93       	push	r17
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	eb 97       	sbiw	r28, 0x3b	; 59
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
	u8 n=0 ;
    2742:	1b ae       	std	Y+59, r1	; 0x3b
	u8 pass =  0 ;
    2744:	1a ae       	std	Y+58, r1	; 0x3a
	u8 tray =  0 ;
    2746:	19 ae       	std	Y+57, r1	; 0x39



	LCD_Init();
    2748:	0e 94 97 07 	call	0xf2e	; 0xf2e <LCD_Init>
	KeyPadIniit();
    274c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <KeyPadIniit>

	LCD_SendString("WELCOME");
    2750:	80 e6       	ldi	r24, 0x60	; 96
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_SendString>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	aa ef       	ldi	r26, 0xFA	; 250
    275e:	b4 e4       	ldi	r27, 0x44	; 68
    2760:	8d ab       	std	Y+53, r24	; 0x35
    2762:	9e ab       	std	Y+54, r25	; 0x36
    2764:	af ab       	std	Y+55, r26	; 0x37
    2766:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2768:	6d a9       	ldd	r22, Y+53	; 0x35
    276a:	7e a9       	ldd	r23, Y+54	; 0x36
    276c:	8f a9       	ldd	r24, Y+55	; 0x37
    276e:	98 ad       	ldd	r25, Y+56	; 0x38
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a ef       	ldi	r20, 0xFA	; 250
    2776:	54 e4       	ldi	r21, 0x44	; 68
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	89 ab       	std	Y+49, r24	; 0x31
    2782:	9a ab       	std	Y+50, r25	; 0x32
    2784:	ab ab       	std	Y+51, r26	; 0x33
    2786:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2788:	69 a9       	ldd	r22, Y+49	; 0x31
    278a:	7a a9       	ldd	r23, Y+50	; 0x32
    278c:	8b a9       	ldd	r24, Y+51	; 0x33
    278e:	9c a9       	ldd	r25, Y+52	; 0x34
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	2c f4       	brge	.+10     	; 0x27aa <main+0x7e>
		__ticks = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	98 ab       	std	Y+48, r25	; 0x30
    27a6:	8f a7       	std	Y+47, r24	; 0x2f
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <main+0xfc>
	else if (__tmp > 65535)
    27aa:	69 a9       	ldd	r22, Y+49	; 0x31
    27ac:	7a a9       	ldd	r23, Y+50	; 0x32
    27ae:	8b a9       	ldd	r24, Y+51	; 0x33
    27b0:	9c a9       	ldd	r25, Y+52	; 0x34
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27be:	18 16       	cp	r1, r24
    27c0:	4c f5       	brge	.+82     	; 0x2814 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c2:	6d a9       	ldd	r22, Y+53	; 0x35
    27c4:	7e a9       	ldd	r23, Y+54	; 0x36
    27c6:	8f a9       	ldd	r24, Y+55	; 0x37
    27c8:	98 ad       	ldd	r25, Y+56	; 0x38
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	98 ab       	std	Y+48, r25	; 0x30
    27e8:	8f a7       	std	Y+47, r24	; 0x2f
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <main+0xde>
    27ec:	88 ec       	ldi	r24, 0xC8	; 200
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9e a7       	std	Y+46, r25	; 0x2e
    27f2:	8d a7       	std	Y+45, r24	; 0x2d
    27f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    27f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <main+0xcc>
    27fc:	9e a7       	std	Y+46, r25	; 0x2e
    27fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	8f a5       	ldd	r24, Y+47	; 0x2f
    2802:	98 a9       	ldd	r25, Y+48	; 0x30
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	98 ab       	std	Y+48, r25	; 0x30
    2808:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	8f a5       	ldd	r24, Y+47	; 0x2f
    280c:	98 a9       	ldd	r25, Y+48	; 0x30
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <main+0xc0>
    2812:	14 c0       	rjmp	.+40     	; 0x283c <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	69 a9       	ldd	r22, Y+49	; 0x31
    2816:	7a a9       	ldd	r23, Y+50	; 0x32
    2818:	8b a9       	ldd	r24, Y+51	; 0x33
    281a:	9c a9       	ldd	r25, Y+52	; 0x34
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	98 ab       	std	Y+48, r25	; 0x30
    2826:	8f a7       	std	Y+47, r24	; 0x2f
    2828:	8f a5       	ldd	r24, Y+47	; 0x2f
    282a:	98 a9       	ldd	r25, Y+48	; 0x30
    282c:	9c a7       	std	Y+44, r25	; 0x2c
    282e:	8b a7       	std	Y+43, r24	; 0x2b
    2830:	8b a5       	ldd	r24, Y+43	; 0x2b
    2832:	9c a5       	ldd	r25, Y+44	; 0x2c
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <main+0x108>
    2838:	9c a7       	std	Y+44, r25	; 0x2c
    283a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2000);
	LCD_SendCommand(LCD_CLEARE_SCREEN);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
	LCD_SendString("Enter your  ");
    2842:	88 e6       	ldi	r24, 0x68	; 104
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_SendString>
	LCD_SetCoursorPosition(1,0);
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <LCD_SetCoursorPosition>
	LCD_SendString(" pasworde ");
    2852:	85 e7       	ldi	r24, 0x75	; 117
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_SendString>
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	aa ef       	ldi	r26, 0xFA	; 250
    2860:	b4 e4       	ldi	r27, 0x44	; 68
    2862:	8f a3       	std	Y+39, r24	; 0x27
    2864:	98 a7       	std	Y+40, r25	; 0x28
    2866:	a9 a7       	std	Y+41, r26	; 0x29
    2868:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	6f a1       	ldd	r22, Y+39	; 0x27
    286c:	78 a5       	ldd	r23, Y+40	; 0x28
    286e:	89 a5       	ldd	r24, Y+41	; 0x29
    2870:	9a a5       	ldd	r25, Y+42	; 0x2a
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a ef       	ldi	r20, 0xFA	; 250
    2878:	54 e4       	ldi	r21, 0x44	; 68
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	8b a3       	std	Y+35, r24	; 0x23
    2884:	9c a3       	std	Y+36, r25	; 0x24
    2886:	ad a3       	std	Y+37, r26	; 0x25
    2888:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    288a:	6b a1       	ldd	r22, Y+35	; 0x23
    288c:	7c a1       	ldd	r23, Y+36	; 0x24
    288e:	8d a1       	ldd	r24, Y+37	; 0x25
    2890:	9e a1       	ldd	r25, Y+38	; 0x26
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	2c f4       	brge	.+10     	; 0x28ac <main+0x180>
		__ticks = 1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9a a3       	std	Y+34, r25	; 0x22
    28a8:	89 a3       	std	Y+33, r24	; 0x21
    28aa:	3f c0       	rjmp	.+126    	; 0x292a <main+0x1fe>
	else if (__tmp > 65535)
    28ac:	6b a1       	ldd	r22, Y+35	; 0x23
    28ae:	7c a1       	ldd	r23, Y+36	; 0x24
    28b0:	8d a1       	ldd	r24, Y+37	; 0x25
    28b2:	9e a1       	ldd	r25, Y+38	; 0x26
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	57 e4       	ldi	r21, 0x47	; 71
    28bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c0:	18 16       	cp	r1, r24
    28c2:	4c f5       	brge	.+82     	; 0x2916 <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	6f a1       	ldd	r22, Y+39	; 0x27
    28c6:	78 a5       	ldd	r23, Y+40	; 0x28
    28c8:	89 a5       	ldd	r24, Y+41	; 0x29
    28ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9a a3       	std	Y+34, r25	; 0x22
    28ea:	89 a3       	std	Y+33, r24	; 0x21
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <main+0x1e0>
    28ee:	88 ec       	ldi	r24, 0xC8	; 200
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	98 a3       	std	Y+32, r25	; 0x20
    28f4:	8f 8f       	std	Y+31, r24	; 0x1f
    28f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f8:	98 a1       	ldd	r25, Y+32	; 0x20
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <main+0x1ce>
    28fe:	98 a3       	std	Y+32, r25	; 0x20
    2900:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	89 a1       	ldd	r24, Y+33	; 0x21
    2904:	9a a1       	ldd	r25, Y+34	; 0x22
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	9a a3       	std	Y+34, r25	; 0x22
    290a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	89 a1       	ldd	r24, Y+33	; 0x21
    290e:	9a a1       	ldd	r25, Y+34	; 0x22
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	69 f7       	brne	.-38     	; 0x28ee <main+0x1c2>
    2914:	14 c0       	rjmp	.+40     	; 0x293e <main+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	6b a1       	ldd	r22, Y+35	; 0x23
    2918:	7c a1       	ldd	r23, Y+36	; 0x24
    291a:	8d a1       	ldd	r24, Y+37	; 0x25
    291c:	9e a1       	ldd	r25, Y+38	; 0x26
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9a a3       	std	Y+34, r25	; 0x22
    2928:	89 a3       	std	Y+33, r24	; 0x21
    292a:	89 a1       	ldd	r24, Y+33	; 0x21
    292c:	9a a1       	ldd	r25, Y+34	; 0x22
    292e:	9e 8f       	std	Y+30, r25	; 0x1e
    2930:	8d 8f       	std	Y+29, r24	; 0x1d
    2932:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2934:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <main+0x20a>
    293a:	9e 8f       	std	Y+30, r25	; 0x1e
    293c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);
	LCD_SendCommand(LCD_CLEARE_SCREEN);
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
    2944:	16 c1       	rjmp	.+556    	; 0x2b72 <main+0x446>
	{
		while (tray !=2)
		{
		while (n!=3)
		{
			while (KeyPadGetPresedKey()=='z')
    2946:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KeyPadGetPresedKey>
    294a:	8a 37       	cpi	r24, 0x7A	; 122
    294c:	e1 f3       	breq	.-8      	; 0x2946 <main+0x21a>
			{

			}
			pass=(pass*10)+ KeyPadGetPresedKey();
    294e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9c 01       	movw	r18, r24
    2956:	22 0f       	add	r18, r18
    2958:	33 1f       	adc	r19, r19
    295a:	c9 01       	movw	r24, r18
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	82 0f       	add	r24, r18
    2966:	93 1f       	adc	r25, r19
    2968:	18 2f       	mov	r17, r24
    296a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KeyPadGetPresedKey>
    296e:	81 0f       	add	r24, r17
    2970:	8a af       	std	Y+58, r24	; 0x3a
			LCD_SendCharacter('*');
    2972:	8a e2       	ldi	r24, 0x2A	; 42
    2974:	0e 94 91 09 	call	0x1322	; 0x1322 <LCD_SendCharacter>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	aa ef       	ldi	r26, 0xFA	; 250
    297e:	b3 e4       	ldi	r27, 0x43	; 67
    2980:	89 8f       	std	Y+25, r24	; 0x19
    2982:	9a 8f       	std	Y+26, r25	; 0x1a
    2984:	ab 8f       	std	Y+27, r26	; 0x1b
    2986:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	69 8d       	ldd	r22, Y+25	; 0x19
    298a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    298c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    298e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a ef       	ldi	r20, 0xFA	; 250
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8d 8b       	std	Y+21, r24	; 0x15
    29a2:	9e 8b       	std	Y+22, r25	; 0x16
    29a4:	af 8b       	std	Y+23, r26	; 0x17
    29a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29a8:	6d 89       	ldd	r22, Y+21	; 0x15
    29aa:	7e 89       	ldd	r23, Y+22	; 0x16
    29ac:	8f 89       	ldd	r24, Y+23	; 0x17
    29ae:	98 8d       	ldd	r25, Y+24	; 0x18
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <main+0x29e>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9c 8b       	std	Y+20, r25	; 0x14
    29c6:	8b 8b       	std	Y+19, r24	; 0x13
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <main+0x31c>
	else if (__tmp > 65535)
    29ca:	6d 89       	ldd	r22, Y+21	; 0x15
    29cc:	7e 89       	ldd	r23, Y+22	; 0x16
    29ce:	8f 89       	ldd	r24, Y+23	; 0x17
    29d0:	98 8d       	ldd	r25, Y+24	; 0x18
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <main+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	69 8d       	ldd	r22, Y+25	; 0x19
    29e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9c 8b       	std	Y+20, r25	; 0x14
    2a08:	8b 8b       	std	Y+19, r24	; 0x13
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <main+0x2fe>
    2a0c:	88 ec       	ldi	r24, 0xC8	; 200
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9a 8b       	std	Y+18, r25	; 0x12
    2a12:	89 8b       	std	Y+17, r24	; 0x11
    2a14:	89 89       	ldd	r24, Y+17	; 0x11
    2a16:	9a 89       	ldd	r25, Y+18	; 0x12
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <main+0x2ec>
    2a1c:	9a 8b       	std	Y+18, r25	; 0x12
    2a1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	8b 89       	ldd	r24, Y+19	; 0x13
    2a22:	9c 89       	ldd	r25, Y+20	; 0x14
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	9c 8b       	std	Y+20, r25	; 0x14
    2a28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <main+0x2e0>
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <main+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	6d 89       	ldd	r22, Y+21	; 0x15
    2a36:	7e 89       	ldd	r23, Y+22	; 0x16
    2a38:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9c 8b       	std	Y+20, r25	; 0x14
    2a46:	8b 8b       	std	Y+19, r24	; 0x13
    2a48:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4c:	98 8b       	std	Y+16, r25	; 0x10
    2a4e:	8f 87       	std	Y+15, r24	; 0x0f
    2a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a52:	98 89       	ldd	r25, Y+16	; 0x10
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <main+0x328>
    2a58:	98 8b       	std	Y+16, r25	; 0x10
    2a5a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);

			n++ ;
    2a5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a5e:	8f 5f       	subi	r24, 0xFF	; 255
    2a60:	8b af       	std	Y+59, r24	; 0x3b

	while(1)
	{
		while (tray !=2)
		{
		while (n!=3)
    2a62:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a64:	83 30       	cpi	r24, 0x03	; 3
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <main+0x33e>
    2a68:	6e cf       	rjmp	.-292    	; 0x2946 <main+0x21a>
			LCD_SendCharacter('*');
			_delay_ms(500);

			n++ ;
		}
		LCD_SendNumber(pass);
    2a6a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a6c:	88 2f       	mov	r24, r24
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 ae 0b 	call	0x175c	; 0x175c <LCD_SendNumber>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e4       	ldi	r25, 0x40	; 64
    2a78:	ac e9       	ldi	r26, 0x9C	; 156
    2a7a:	b5 e4       	ldi	r27, 0x45	; 69
    2a7c:	8b 87       	std	Y+11, r24	; 0x0b
    2a7e:	9c 87       	std	Y+12, r25	; 0x0c
    2a80:	ad 87       	std	Y+13, r26	; 0x0d
    2a82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	4a ef       	ldi	r20, 0xFA	; 250
    2a92:	54 e4       	ldi	r21, 0x44	; 68
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	8f 83       	std	Y+7, r24	; 0x07
    2a9e:	98 87       	std	Y+8, r25	; 0x08
    2aa0:	a9 87       	std	Y+9, r26	; 0x09
    2aa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa6:	78 85       	ldd	r23, Y+8	; 0x08
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e8       	ldi	r20, 0x80	; 128
    2ab2:	5f e3       	ldi	r21, 0x3F	; 63
    2ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab8:	88 23       	and	r24, r24
    2aba:	2c f4       	brge	.+10     	; 0x2ac6 <main+0x39a>
		__ticks = 1;
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	9e 83       	std	Y+6, r25	; 0x06
    2ac2:	8d 83       	std	Y+5, r24	; 0x05
    2ac4:	3f c0       	rjmp	.+126    	; 0x2b44 <main+0x418>
	else if (__tmp > 65535)
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	3f ef       	ldi	r19, 0xFF	; 255
    2ad2:	4f e7       	ldi	r20, 0x7F	; 127
    2ad4:	57 e4       	ldi	r21, 0x47	; 71
    2ad6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ada:	18 16       	cp	r1, r24
    2adc:	4c f5       	brge	.+82     	; 0x2b30 <main+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e2       	ldi	r20, 0x20	; 32
    2aec:	51 e4       	ldi	r21, 0x41	; 65
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	bc 01       	movw	r22, r24
    2af8:	cd 01       	movw	r24, r26
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	0f c0       	rjmp	.+30     	; 0x2b26 <main+0x3fa>
    2b08:	88 ec       	ldi	r24, 0xC8	; 200
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	9c 83       	std	Y+4, r25	; 0x04
    2b0e:	8b 83       	std	Y+3, r24	; 0x03
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <main+0x3e8>
    2b18:	9c 83       	std	Y+4, r25	; 0x04
    2b1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	9e 83       	std	Y+6, r25	; 0x06
    2b24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	69 f7       	brne	.-38     	; 0x2b08 <main+0x3dc>
    2b2e:	14 c0       	rjmp	.+40     	; 0x2b58 <main+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b30:	6f 81       	ldd	r22, Y+7	; 0x07
    2b32:	78 85       	ldd	r23, Y+8	; 0x08
    2b34:	89 85       	ldd	r24, Y+9	; 0x09
    2b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	8d 83       	std	Y+5, r24	; 0x05
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <main+0x424>
    2b54:	9a 83       	std	Y+2, r25	; 0x02
    2b56:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
		if (pass == 123)
    2b58:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b5a:	8b 37       	cpi	r24, 0x7B	; 123
    2b5c:	21 f4       	brne	.+8      	; 0x2b66 <main+0x43a>
		{
			LCD_SendCommand(LCD_CLEARE_SCREEN);
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>
    2b64:	0a c0       	rjmp	.+20     	; 0x2b7a <main+0x44e>
			break ;
		}
		else
		{
			tray ++ ;
    2b66:	89 ad       	ldd	r24, Y+57	; 0x39
    2b68:	8f 5f       	subi	r24, 0xFF	; 255
    2b6a:	89 af       	std	Y+57, r24	; 0x39
			LCD_SendCommand(LCD_CLEARE_SCREEN);
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_SendCommand>



	while(1)
	{
		while (tray !=2)
    2b72:	89 ad       	ldd	r24, Y+57	; 0x39
    2b74:	82 30       	cpi	r24, 0x02	; 2
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <main+0x44e>
    2b78:	74 cf       	rjmp	.-280    	; 0x2a62 <main+0x336>
			LCD_SendCommand(LCD_CLEARE_SCREEN);
		}

		}

		if (tray == 2 )
    2b7a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b7c:	82 30       	cpi	r24, 0x02	; 2
    2b7e:	41 f4       	brne	.+16     	; 0x2b90 <main+0x464>
		{
			LCD_SendString("No more tries ");
    2b80:	80 e8       	ldi	r24, 0x80	; 128
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_SendString>
			tray ++;
    2b88:	89 ad       	ldd	r24, Y+57	; 0x39
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	89 af       	std	Y+57, r24	; 0x39
    2b8e:	f1 cf       	rjmp	.-30     	; 0x2b72 <main+0x446>
		}
		else
		{
			LCD_SendString("1-fan ");
    2b90:	8f e8       	ldi	r24, 0x8F	; 143
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_SendString>
			LCD_SendString("   2-heat ");
    2b98:	86 e9       	ldi	r24, 0x96	; 150
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_SendString>
			LCD_SetCoursorPosition(1,0);
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <LCD_SetCoursorPosition>
			LCD_SendString("      3-light ");
    2ba8:	81 ea       	ldi	r24, 0xA1	; 161
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_SendString>
    2bb0:	e0 cf       	rjmp	.-64     	; 0x2b72 <main+0x446>

00002bb2 <__divmodhi4>:
    2bb2:	97 fb       	bst	r25, 7
    2bb4:	09 2e       	mov	r0, r25
    2bb6:	07 26       	eor	r0, r23
    2bb8:	0a d0       	rcall	.+20     	; 0x2bce <__divmodhi4_neg1>
    2bba:	77 fd       	sbrc	r23, 7
    2bbc:	04 d0       	rcall	.+8      	; 0x2bc6 <__divmodhi4_neg2>
    2bbe:	0c d0       	rcall	.+24     	; 0x2bd8 <__udivmodhi4>
    2bc0:	06 d0       	rcall	.+12     	; 0x2bce <__divmodhi4_neg1>
    2bc2:	00 20       	and	r0, r0
    2bc4:	1a f4       	brpl	.+6      	; 0x2bcc <__divmodhi4_exit>

00002bc6 <__divmodhi4_neg2>:
    2bc6:	70 95       	com	r23
    2bc8:	61 95       	neg	r22
    2bca:	7f 4f       	sbci	r23, 0xFF	; 255

00002bcc <__divmodhi4_exit>:
    2bcc:	08 95       	ret

00002bce <__divmodhi4_neg1>:
    2bce:	f6 f7       	brtc	.-4      	; 0x2bcc <__divmodhi4_exit>
    2bd0:	90 95       	com	r25
    2bd2:	81 95       	neg	r24
    2bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd6:	08 95       	ret

00002bd8 <__udivmodhi4>:
    2bd8:	aa 1b       	sub	r26, r26
    2bda:	bb 1b       	sub	r27, r27
    2bdc:	51 e1       	ldi	r21, 0x11	; 17
    2bde:	07 c0       	rjmp	.+14     	; 0x2bee <__udivmodhi4_ep>

00002be0 <__udivmodhi4_loop>:
    2be0:	aa 1f       	adc	r26, r26
    2be2:	bb 1f       	adc	r27, r27
    2be4:	a6 17       	cp	r26, r22
    2be6:	b7 07       	cpc	r27, r23
    2be8:	10 f0       	brcs	.+4      	; 0x2bee <__udivmodhi4_ep>
    2bea:	a6 1b       	sub	r26, r22
    2bec:	b7 0b       	sbc	r27, r23

00002bee <__udivmodhi4_ep>:
    2bee:	88 1f       	adc	r24, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	5a 95       	dec	r21
    2bf4:	a9 f7       	brne	.-22     	; 0x2be0 <__udivmodhi4_loop>
    2bf6:	80 95       	com	r24
    2bf8:	90 95       	com	r25
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	08 95       	ret

00002c00 <__prologue_saves__>:
    2c00:	2f 92       	push	r2
    2c02:	3f 92       	push	r3
    2c04:	4f 92       	push	r4
    2c06:	5f 92       	push	r5
    2c08:	6f 92       	push	r6
    2c0a:	7f 92       	push	r7
    2c0c:	8f 92       	push	r8
    2c0e:	9f 92       	push	r9
    2c10:	af 92       	push	r10
    2c12:	bf 92       	push	r11
    2c14:	cf 92       	push	r12
    2c16:	df 92       	push	r13
    2c18:	ef 92       	push	r14
    2c1a:	ff 92       	push	r15
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	ca 1b       	sub	r28, r26
    2c2a:	db 0b       	sbc	r29, r27
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	09 94       	ijmp

00002c38 <__epilogue_restores__>:
    2c38:	2a 88       	ldd	r2, Y+18	; 0x12
    2c3a:	39 88       	ldd	r3, Y+17	; 0x11
    2c3c:	48 88       	ldd	r4, Y+16	; 0x10
    2c3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c40:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c42:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c44:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c46:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c48:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c4a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c4c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c4e:	df 80       	ldd	r13, Y+7	; 0x07
    2c50:	ee 80       	ldd	r14, Y+6	; 0x06
    2c52:	fd 80       	ldd	r15, Y+5	; 0x05
    2c54:	0c 81       	ldd	r16, Y+4	; 0x04
    2c56:	1b 81       	ldd	r17, Y+3	; 0x03
    2c58:	aa 81       	ldd	r26, Y+2	; 0x02
    2c5a:	b9 81       	ldd	r27, Y+1	; 0x01
    2c5c:	ce 0f       	add	r28, r30
    2c5e:	d1 1d       	adc	r29, r1
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	ed 01       	movw	r28, r26
    2c6c:	08 95       	ret

00002c6e <_exit>:
    2c6e:	f8 94       	cli

00002c70 <__stop_program>:
    2c70:	ff cf       	rjmp	.-2      	; 0x2c70 <__stop_program>
